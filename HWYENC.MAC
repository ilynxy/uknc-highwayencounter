	.TITLE	EXPRES
	.MCALL	.EXIT

.MACRO	PUSH	RR
	MOV	RR,-(SP)
.ENDM
.MACRO	POP	RR
	MOV	(SP)+,RR
.ENDM

	.ASECT
	.=001000
START::
	CLR	@#177560

	MOV	#GAMESC, R1		; Строка для подготовки игрового экрана
	CALL	PRINT
	CALL	PAUSE			; подождём пока очистится экран

;	CALL	LB4D0	; Show Info Screen

1$:	CALL	LB0DE	; Start point
	CALL	PAUSE
	BR	1$
	
	HALT

GAMESC:	; Строка подготовки игрового экрана
	.BYTE	33,246,62		; Формат экрана 40x24
	.BYTE	33,240,63		; Цвет символа
	.BYTE	33,241,60		; Цвет знакоместа 0
	.BYTE	33,242,60		; Цвет фона 0
	.BYTE	14			; Clear screen
	.BYTE	33,131,40,53		; Курсор в позицию для написания ревизии и даты
.INCLUDE /VERSIO.MAC/
	.BYTE	0
	.EVEN

; Подпрограмма: Печать строки: R1 = адрес строки, строка завершается 0; портит R0
PRINT:
PR0:	MOVB	(R1)+, R0		; Конец строки?
	BEQ	PR2			; да => завершаем
PR1:	TSTB	@#177564		; Источник канала 0 готов?
	BPL	PR1			; нет => ждём
	MOV	R0, @#177566		; передаём символ в канал 0
	BR	PR0
PR2:	RETURN

;Подпрограмма: пауза после очистки экрана чтобы ПП закончил работу
PAUSE:	; Pause to let PPU finish the previous commands
	MOV	#177777, R5
PAUSE0:	NOP
	SOB	R5, PAUSE0
	RETURN

; Draw sprite with shift by -2px
L9933:	MOV	R1, R3		; 9933	LD L,C	
				; 9934	LD H,B	
	MOV	#24., R0	; 9935	LD A,$18	
L9937:	PUSH	R0		; 9937	EX AF,AF'	
				; 9938	EX DE,HL	
	MOV	(R2)+, R0	; 9939	LD A,(HL)	
				; 993A	INC HL	
	MOVB	(R2)+, R1	; 993B	LD B,(HL)	
				; 993C	INC HL	
				; 993D	LD C,(HL)	
				; 993E	INC HL	
	ASL	R0		; 993F	SRA A	
	ROLB	R1		; 9941	RR B	
				; 9943	RR C	
	ASL	R0		; 9945	SRA A	
	ROLB	R1		; 9947	RR B	
				; 9949	RR C	
				; 994B	EX DE,HL	
	BICB	R0, (R3)+	; 994C	AND (HL)	
				; 994D	LD (HL),A	
	SWAB	R0		; 994E	LD A,B	
				; 994F	INC HL	
	BICB	R0, (R3)+	; 9950	AND (HL)	
				; 9951	LD (HL),A	
				; 9952	LD A,C	
				; 9953	INC HL	
	BICB	R1, (R3)	; 9954	AND (HL)	
				; 9955	LD (HL),A	
	DEC	R3		; 9956	DEC HL	
	DEC	R3		; 9957	DEC HL	
				; 9958	EX DE,HL	
	MOVB	(R2)+, R0	; 9959	LD A,(HL)	
				; 995A	INC HL	
	MOV	(R2)+, R1	; 995B	LD B,(HL)	
				; 995C	INC HL	
				; 995D	LD C,(HL)	
				; 995E	INC HL	
	ASLB	R0		; 995F	SRL A	
	ROL	R1		; 9961	RR B	
				; 9963	RR C	
	ASLB	R0		; 9965	SRL A	
	ROL	R1		; 9967	RR B	
				; 9969	RR C	
				; 996B	EX DE,HL	
	BISB	R0, (R3)+	; 996C	OR (HL)	
				; 996D	LD (HL),A	
				; 996E	LD A,B	
				; 996F	INC HL	
	BISB	R1, (R3)+	; 9970	OR (HL)	
				; 9971	LD (HL),A	
	SWAB	R1		; 9972	LD A,C	
				; 9973	INC HL	
	BISB	R1, (R3)	; 9974	OR (HL)	
				; 9975	LD (HL),A	
	SUB	#34., R3	; 9976	LD BC,$FFDE	
				; 9979	ADD HL,BC	
	POP	R0		; 997A	EX AF,AF'	
	SOB	R0, L9937	; 997B	DEC A	
				; 997C	JP NZ,$9937	
	RETURN			; 997F	RET	

; Draw sprite with shift by 4px
L99D1:
	MOV	R1, R3		; 99D1	LD H,B	
				; 99D2	LD L,C	
	MOV	#24., R0	; 99D3	LD A,$18	Sprite height = 24
L99D5:	PUSH	R0		; 99D5	EX AF,AF'	store counter A
				; 99D6	EX DE,HL	
	MOV	(R2)+, R0	; 99D7	LD A,(HL)	Get mask byte 0
				; 99D8	INC HL	
				; 99D9	LD B,(HL)	Get mask byte 1
				; 99DA	INC HL	
	MOVB	(R2)+, R1	; 99DB	LD C,(HL)	Get mask byte 2
				; 99DC	INC HL	
				; 99DD	SCF	
	ASRB	R1		; 99DE	RL C		Shift by 1
	ROR	R0		; 99E0	RL B
				; 99E2	RLA
	ASRB	R1		; 99E3	RL C		Shift by 2
	ROR	R0		; 99E5	RL B
				; 99E7	RLA
	ASRB	R1		; 99E8	RL C		Shift by 3
	ROR	R0		; 99EA	RL B
				; 99EC	RLA
	ASRB	R1		; 99ED	RL C		Shift by 4
	ROR	R0		; 99EF	RL B
				; 99F1	RLA
				; 99F2	EX DE,HL	
	BICB	R0, (R3)+	; 99F3	AND (HL)	
				; 99F4	LD (HL),A	
	SWAB	R0		; 99F5	LD A,B	
				; 99F6	INC HL	
	BICB	R0, (R3)	; 99F7	AND (HL)	
				; 99F8	LD (HL),A	
	DEC	R3		; 99F9	DEC HL	
				; 99FA	EX DE,HL	
	MOVB	(R2)+, R0	; 99FB	LD A,(HL)	
				; 99FC	INC HL	
	MOV	(R2)+, R1	; 99FD	LD B,(HL)	
				; 99FE	INC HL	
				; 99FF	LD C,(HL)	
				; 9A00	INC HL	
	ASR	R1		; 9A01	SLA C		Shift by 1
	RORB	R0		; 9A03	RL B
				; 9A05	RLA
	ASR	R1		; 9A06	SLA C		Shift by 2
	RORB	R0		; 9A08	RL B
				; 9A0A	RLA
	ASR	R1		; 9A0B	SLA C		Shift by 3
	RORB	R0		; 9A0D	RL B
				; 9A0F	RLA
	ASR	R1		; 9A10	SLA C		Shift by 4
	RORB	R0		; 9A12	RL B
				; 9A14	RLA
				; 9A15	EX DE,HL	
	BISB	R0, (R3)+	; 9A16	OR (HL)	
				; 9A17	LD (HL),A	
				; 9A18	LD A,B	
				; 9A19	INC HL	
	BISB	R1, (R3)	; 9A1A	OR (HL)	
				; 9A1B	LD (HL),A	
	SUB	#33., R3	; 9A1C	LD BC,$FFDF	
				; 9A1F	ADD HL,BC	
	POP	R0		; 9A20	EX AF,AF'	restore counter A
	SOB	R0, L99D5	; 9A21	DEC A	
				; 9A22	JP NZ,$99D5	loop by sprite height
	RETURN			; 9A25	RET	

; Draw sprite with shift by 2px
L9A26:
	MOV	R1, R3		; 9A26	LD H,B	
				; 9A27	LD L,C	
	MOV	#24., R0	; 9A28	LD A,$18	
L9A2A:	PUSH	R0		; 9A2A	EX AF,AF'	
				; 9A2B	EX DE,HL	
	MOV	(R2)+, R0	; 9A2C	LD A,(HL)	
				; 9A2D	INC HL	
				; 9A2E	LD B,(HL)	
				; 9A2F	INC HL	
	MOVB	(R2)+, R1	; 9A30	LD C,(HL)	
				; 9A31	INC HL	
				; 9A32	SCF	
	ASRB	R1		; 9A33	RL C	
	ROR	R0		; 9A35	RL B	
				; 9A37	RLA	
	ASRB	R1		; 9A38	RL C	
	ROR	R0		; 9A3A	RL B	
				; 9A3C	RLA	
				; 9A3D	EX DE,HL	
	BICB	R0, (R3)+	; 9A3E	AND (HL)	
				; 9A3F	LD (HL),A	
	SWAB	R0		; 9A40	LD A,B	
				; 9A41	INC HL	
	BICB	R0, (R3)+	; 9A42	AND (HL)	
				; 9A43	LD (HL),A	
				; 9A44	LD A,C	
				; 9A45	INC HL	
	BICB	R1, (R3)	; 9A46	AND (HL)	
				; 9A47	LD (HL),A	
	DEC	R3		; 9A48	DEC HL	
	DEC	R3		; 9A49	DEC HL	
				; 9A4A	EX DE,HL	
	MOVB	(R2)+, R0	; 9A4B	LD A,(HL)	
				; 9A4C	INC HL	
	MOV	(R2)+, R1	; 9A4D	LD B,(HL)	
				; 9A4E	INC HL	
				; 9A4F	LD C,(HL)	
				; 9A50	INC HL	
	ASR	R1		; 9A51	SLA C	
	RORB	R0		; 9A53	RL B	
				; 9A55	RLA	
	ASR	R1		; 9A56	SLA C	
	RORB	R0		; 9A58	RL B	
				; 9A5A	RLA	
				; 9A5B	EX DE,HL	
	BISB	R0, (R3)+	; 9A5C	OR (HL)	
				; 9A5D	LD (HL),A	
				; 9A5E	LD A,B	
				; 9A5F	INC HL	
	BISB	R1, (R3)+	; 9A60	OR (HL)	
				; 9A61	LD (HL),A	
	SWAB	R1		; 9A62	LD A,C	
				; 9A63	INC HL	
	BISB	R1, (R3)	; 9A64	OR (HL)	
				; 9A65	LD (HL),A	
	SUB	#34., R3	; 9A66	LD BC,$FFDE	
				; 9A69	ADD HL,BC	
	POP	R0		; 9A6A	EX AF,AF'	
	SOB	R0, L9A2A	; 9A6B	DEC A	
				; 9A6C	JP NZ,$9A2A	
	RETURN			; 9A6F	RET	

; Draw sprite with no shift
L9A70:	MOV	R1, R3		; 9A70	LD H,B	
				; 9A71	LD L,C	
	MOV	#24., R1	; 9A72	LD B,$18	
L9A74:	MOV	(R2)+, R0	; 9A74	LD A,(DE)	
	BICB	R0, (R3)+	; 9A75	AND (HL)	
				; 9A76	LD (HL),A	
				; 9A77	INC DE	
				; 9A78	INC HL	
	SWAB	R0		; 9A79	LD A,(DE)	
	BICB	R0, (R3)+	; 9A7A	AND (HL)	
				; 9A7B	LD (HL),A	
				; 9A7C	INC DE	
				; 9A7D	INC HL	
	MOVB	(R2)+, R0	; 9A7E	LD A,(DE)	
	BICB	R0, (R3)	; 9A7F	AND (HL)	
				; 9A80	LD (HL),A	
				; 9A81	INC DE	
	DEC	R3		; 9A82	DEC HL	
	DEC	R3		; 9A83	DEC HL	
	MOVB	(R2)+, R0	; 9A84	LD A,(DE)	
	BISB	R0, (R3)+	; 9A85	OR (HL)	
				; 9A86	LD (HL),A	
				; 9A87	INC DE	
				; 9A88	INC HL	
	MOV	(R2)+, R0	; 9A89	LD A,(DE)	
	BISB	R0, (R3)+	; 9A8A	OR (HL)	
				; 9A8B	LD (HL),A	
				; 9A8C	INC DE	
				; 9A8D	INC HL	
	SWAB	R0		; 9A8E	LD A,(DE)	
	BISB	R0, (R3)	; 9A8F	OR (HL)	
				; 9A90	LD (HL),A	
				; 9A91	INC DE	
				; 9A92	LD A,B	
				; 9A93	LD BC,$FFDE	
	SUB	#34., R3	; 9A96	ADD HL,BC	
				; 9A97	LD B,A	
	SOB	R1, L9A74	; 9A98	DJNZ $9A74	
	RETURN			; 9A9A	RET	

; Start point?
LB0DE:
		; B0DE	LD BC,$F300
LB0E1:
		; B0E1	LD HL,$785A	
		; B0E4	CALL $B203	Sound
		; B0E7	XOR A	
		; B0E8	IN A,($FE)	
		; B0EA	CPL	
		; B0EB	AND $1F	
		; B0ED	JR NZ,$B0E7	
	CALL	LB2DA		; B0EF	CALL $B2DA	Prepare shadow screen
	MOV	#0, LB4CF	; B0F2	XOR A	
				; B0F3	LD ($B4CF),A	
	CALL	LB39A		; B0F6	CALL $B39A	Prepare screen with attributes
	MOV	#104, LB4CF	; B0F9	LD A,$44	
				; B0FB	LD ($B4CF),A	
	CALL	LB39A		; B0FE	CALL $B39A	Prepare screen with attributes
	CALL	LB33C		; B101	CALL $B33C	"HIGHWAY ENCOUNTER" big sign
	MOV	#LB21E, R3	; B104	LD HL,$B21E	
	CALL	LB890		; B107	CALL $B890	Print Text
	;TODO

	RETURN ;STUB

; Routine: Sound
LB203:
	RETURN ;STUB

; Text for Title Screen
LB21E:	.WORD	106716
	.BYTE	130,212,121,145,144,130,137,142,115,123,137,143,144,121,115,140	; AUTHOR
	.BYTE	121,136,121,151,131,212,377,000
	.WORD	124533
	.BYTE	131,312,137,140,144,131,137,136,143,377
	.WORD	127127
	.BYTE	131,301,212,033,025,051,022,037,021,042,024,377			; 1 KEYBOARD
	.WORD	130325
	.BYTE	131,302,212,031,036,044,025,042,026,021,023,025,015,002,377,000 ; 2 INTERFACE 2
	.WORD	131523
	.BYTE	132,303,212,033,025,035,040,043,044,037,036,377			; 3 KEMPSTON
	.WORD	132721
	.BYTE	132,304,212,040,042,037,044,025,033,014,021,027,026,377		; 4 PROTEK/AGF
	.WORD	135315
	.BYTE	132,305,212,031,036,026,037,042,035,021,044,031,037,036,377,000	; 5 INFORMATION
	.WORD	136513
	.BYTE	132,306,212,024,025,035,037,036,043,044,042,021,044,031,037,036,377,000	; 6 DEMONSTRATION
	.WORD	137711
	.BYTE	132,307,212,043,044,021,042,044,015,027,021,035,025,377		; 7 START GAME
	.WORD	142304
	.BYTE	132,212,123,137,140,151,142,131,127,130,144,115,101,111,110,105	; COPYRIGHT 1985 VORTEX SOFTWARE
	.BYTE	115,146,137,142,144,125,150,115,143,137,126,144,147,121,142,125,212,376
	.EVEN

; Routine: Prepare shadow screen
LB2DA:	MOV	#LD900, R3	; B2DA	LD HL,$D900	
				; B2DD	LD DE,$D901
	CLR	R0		; B2E0	LD (HL),$00
;	MOV #177777,R0;DEBUG		
	MOV	#3500., R1	; B2E2	LD BC,$1B58
1$:	MOV	R0, (R3)+	; B2E5	LDIR
	SOB	R1, 1$
	MOV	#LDF00, R3	; B2E7	LD HL,$DF00	
	MOV	R3, R2		; B2EA	LD D,H	
				; B2EB	LD E,L	
	MOV	#L7100, R4	; B2EC	LD IX,$7100	
	MOV	#8., R1		; B2F0	LD B,$08	
LB2F2:	PUSH	R1		; B2F2	PUSH BC
	MOVB	10(R4), R0	; B2F3	LD A,(IX+$08)	
	MOVB	R0, (R2)+	; B2F6	LD (DE),A	
				; B2F7	INC DE	
	MOVB	(R4)+, R0	; B2F8	LD A,(IX+$00)	
	MOVB	R0, (R2)+	; B2FB	LD (DE),A	
				; B2FC	INC DE	
	MOV	#30.,R1		; B2FD	LD BC,$001E	
2$:	MOVB	(R3)+, (R2)+	; B300	LDIR	
	SOB	R1, 2$
				; B302	INC IX	
	INC	R3		; B304	INC HL	
	INC	R3		; B305	INC HL	
	POP	R1		; B306	POP BC	
	SOB	R1, LB2F2	; B307	DJNZ $B2F2	
	SUB	#256., R3	; B309	DEC H	
	MOV	#10500, R1	; B30A	LD BC,$1140	
3$:	MOVB	(R3)+, (R2)+	; B30D	LDIR	
	SOB	R1, 3$		
	MOV	#LDF00, R3	; B30F	LD HL,$DF00	
	MOV	#<LDF00+1>, R2	; B312	LD DE,$DF01	
	MOVB	#377, (R3)	; B315	LD (HL),$FF	
	MOV	#31., R1	; B317	LD BC,$001F	
4$:	MOVB	(R3)+, (R2)+	; B31A	LDIR	
	SOB	R1, 4$
	MOV	#LDF00, R3	; B31C	LD HL,$DF00	
	MOV	#<LDBC0+5504.>, R2	; B31F	LD DE,$F140	
	MOV	#32., R1	; B322	LD BC,$0020	
5$:	MOVB	(R3)+, (R2)+	; B325	LDIR	
	SOB	R1, 5$
	MOV	#<LDF00+32.>, R3	; B327	LD HL,$DF20	
	MOV	#31., R2	; B32A	LD DE,$001F	
	MOV	#146., R1	; B32D	LD B,$92	
LB32F:	BISB	#1, (R3)	; B32F	LD A,(HL)	
				; B330	OR $80	
				; B332	LD (HL),A	
	ADD	R2, R3		; B333	ADD HL,DE	
	BISB	#200, (R3)+	; B334	LD A,(HL)	
				; B335	OR $01	
				; B337	LD (HL),A	
				; B338	INC HL	
	SOB	R1, LB32F	; B339	DJNZ $B32F	
	RETURN			; B33B	RET	

LB33C:	MOV	#LB499, R3		; B33C	LD HL,$B499	"HIGHWAY ENCOUNTER" pixels address
	MOV	#LD900, R2		; B33F	LD DE,$D900	title sign buffer
	MOV	#50., R1		; B342	LD BC,$0032	50 bytes
1$:	MOVB	(R3)+, (R2)+		; B345	LDIR		copy
	MOV	#<LDF00+22.>, R1	; B347	LD BC,$DF16	address on shadow screen
	MOVB	#8., R0			; B34A	LD A,$08	
	MOV	#LD900, R3		; B34C	LD HL,$D900	title sign buffer
	CALL	LB3D8			; B34F	CALL $B3D8	
	MOV	#<LDF00+119.>, R1	; B352	LD BC,$DF77	
	MOVB	#16., R0		; B355	LD A,$10	
	CALL	LB3D8			; B357	CALL $B3D8	
	MOV	#<LDF00+216.>, R1	; B35A	LD BC,$DFD8	
	MOVB	#24., R0		; B35D	LD A,$18	
	CALL	LB3D8			; B35F	CALL $B3D8	
	MOV	#<LDF00+312.>, R1	; B362	LD BC,$E038	
	CLRB	R0			; B365	LD A,$00	
	CALL	LB3D8			; B367	CALL $B3D8	
	MOV	#<LDF00+409.>, R1	; B36A	LD BC,$E099	
	MOVB	#8., R0			; B36D	LD A,$08	
	CALL	LB3D8			; B36F	CALL $B3D8	
	MOV	#<LDF00+603.>, R1	; B372	LD BC,$E15B	
	MOVB	#24., R0		; B375	LD A,$18	
	CALL	LB3D8			; B377	CALL $B3D8	
	MOV	#<LDF00+699.>, R1	; B37A	LD BC,$E1BB	
	CLRB	R0			; B37D	LD A,$00	
	CALL	LB3D8			; B37F	CALL $B3D8	
	MOV	#<LDF00+796.>, R1	; B382	LD BC,$E21C	
	MOVB	#8., R0			; B385	LD A,$08	
	CALL	LB3D8			; B387	CALL $B3D8	
	MOV	#<LDF00+893.>, R1	; B38A	LD BC,$E27D	
	MOVB	#16., R0		; B38D	LD A,$10	
	CALL	LB3D8			; B38F	CALL $B3D8	
	MOV	#<LDF00+990.>, R1	; B392	LD BC,$E2DE	
	MOVB	#24., R0		; B395	LD A,$18	
	CALL	LB3D8			; B397	CALL $B3D8	
;
; Routine: Prepare screen
LB39A:	;STUB
; Copy shadow screen to the real screen, 256. x 192. pixels
LB3A9:
	MOV	#LDBC0, R3
	MOV	#105504, R2
	MOV	#192., R0		; Количество копируемых строк
	MOV	#176640, R4		; Адрес порта адреса косвенной записи УКНЦ
	MOV	#176642, R5		; Адрес порта данных косвенной записи УКНЦ
1$:	PUSH	R0
	MOV	#32., R1		; Счётчик байт по строке
2$:	MOVB	(R3)+, R0		; берём байт
	BIC    	#177400, R0		; оставляем младший байт
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	R0, (R5)		; Пишем в экран
	INC	R2
	SOB	R1, 2$
	ADD	#<80.-32.>, R2		; К следующей строке
	POP	R0
	SOB	R0, 1$			; продолжаем цикл по строкам
	RETURN

; Routine
LB3D8:	MOV	#LBFB0, LB4CD		; B3D8	LD DE,$BFB0	Mask and sprite = BFB0
					; B3DB	LD ($B4CD),DE	-- Pyramid block appears, phase 1
	CALL	LB41B			; B3DF	CALL $B41B	
	MOV	#LB980, LB4CD		; B3E2	LD DE,$B980	Mask and sprite = B980
					; B3E5	LD ($B4CD),DE	-- Pyramid block appears, phase 2
	CALL	LB41B			; B3E9	CALL $B41B	
	MOV	#LBA10, LB4CD		; B3EC	LD DE,$BA10	Mask and sprite = BA10
					; B3EF	LD ($B4CD),DE	-- Pyramid block appears, phase 3
	CALL	LB41B			; B3F3	CALL $B41B	
	MOV	#LB8F0, LB4CD		; B3F6	LD DE,$B8F0	Mask and sprite = B8F0
					; B3F9	LD ($B4CD),DE	-- Pyramid block used on the title screen
	CALL	LB427			; B3FD	CALL $B427	
	ADD	#5, R3			; B400	LD DE,$0005	
					; B403	ADD HL,DE	
	PUSH	R3			; B404	PUSH HL	
	MOV	#<LDF00+32.>, R3	; B405	LD HL,$DF20	
	MOV	#31., R2		; B408	LD DE,$001F	
	MOV	#130., R1		; B40B	LD B,$82	
LB40D:	BISB	#1, (R3)		; B40D	LD A,(HL)	
					; B40E	OR $80	
					; B410	LD (HL),A	
	ADD	R2, R3			; B411	ADD HL,DE	
	BISB	#200, (R3)+		; B412	LD A,(HL)	
					; B413	OR $01	
					; B415	LD (HL),A	
					; B416	INC HL	
	SOB	R1, LB40D		; B417	DJNZ $B40D	
	POP	R3			; B419	POP HL	
	RETURN				; B41A	RET	

; Routine
; Used by the routine at B3D8
LB41B:
		; B41B	EX AF,AF'	
		; B41C	XOR A	
		; B41D	IN A,($FE)	
		; B41F	CPL	
		; B420	AND $1F	
		; B422	JR Z,$B426	
		; B424	EX AF,AF'	
		; B425	RET	
		; B426	EX AF,AF'
; This entry point is used by the routine at B3D8
; A = 0 / 8. / 16. / 24.
LB427:
	PUSH	R3		; B427	PUSH HL	
	PUSH	R1		; B428	PUSH BC	
	PUSH	R0		; B429	PUSH AF	
	MOV	R3, LB4CB	; B42A	LD ($B4CB),HL	save HL
	ADD	#4, R3		; B42D	INC L	
				; B42E	INC L	
				; B42F	INC L	
				; B430	INC L	
	MOVB	#36., R2	; B431	LD E,$24	Loop counter = 36
LB433:	PUSH	R2		; B433	PUSH DE		save loop counter
	BITB	#1, (R3)	; B434	BIT 0,(HL)	
	BEQ	LB463		; B436	JR Z,$B463	
	MOVB	R0, R3		; B438	LD E,A	
				; B439	LD D,$00	
	ADD	#LB446, R3	; B43B	LD HL,$B446	
				; B43E	ADD HL,DE	
	PUSH	R0		; B43F	PUSH AF	
	PUSH	R1		; B440	PUSH BC	
	MOV	LB4CD, R2	; B441	LD DE,($B4CD)	Get mask and sprite address
	JMP	(R3)		; B445	JP (HL)	
LB446:	CALL	L9933		; B446	CALL $8F85	0. -- JP 9933 Draw sprite with shift by -2px
	BR	LB461		; B449	JP $B461	
	NOP			; B44C	NOP	
				; B44D	NOP	
	CALL	L9A70		; B44E	CALL $8F82	8. -- JP 9A70 Draw sprite with no shift
	BR	LB461		; B451	JP $B461	
	NOP			; B454	NOP	
				; B455	NOP	
	CALL	L9A26		; B456	CALL $8F7F	16. -- JP 9A26 Draw sprite with shift by 2px
	BR	LB461		; B459	JP $B461	
	NOP			; B45C	NOP	
				; B45D	NOP	
	CALL	L99D1		; B45E	CALL $8F7C	24. -- JP 99D1 Draw sprite with shift by 4px
LB461:	POP	R1		; B461	POP BC	
	POP	R0		; B462	POP AF	
LB463:	MOV	#96., R3	; B463	LD HL,$0060	
	ADD	R1, R3		; B466	ADD HL,BC	
	MOV	R3, R1		; B467	LD C,L	
				; B468	LD B,H	
	ADD	#24., R0	; B469	ADD A,$18	
	CMP	R0, #32.	; B46B	CP $20	
	BLO	LB472		; B46D	JR C,$B472	
	BIC	#177740, R0	; B46F	AND $1F	
	DEC	R1		; B471	DEC BC	
LB472:	MOV	LB4CB, R3	; B472	LD HL,($B4CB)	restore HL
	RORB	(R3)+		; B475	RR (HL)	
				; B477	INC L	
	RORB	(R3)+		; B478	RR (HL)	
				; B47A	INC L	
	RORB	(R3)+		; B47B	RR (HL)	
				; B47D	INC L	
	RORB	(R3)+		; B47E	RR (HL)	
				; B480	INC L	
	RORB	(R3)		; B481	RR (HL)	
	POP	R2		; B483	POP DE		restore loop counter
	SOB	R2, LB433	; B484	DEC E	
				; B485	JR NZ,$B433	loop
	CALL	LB3A9		; B487	CALL $B3A9	Prepare screen
	MOV	#LB499, R3	; B48A	LD HL,$B499	
	MOV	#LD900, R2	; B48D	LD DE,$D900	
	MOVB	#50., R1	; B490	LD BC,$0032	
1$:	MOVB	(R3)+, (R2)+	; B493	LDIR	
	SOB	R1, 1$
	POP	R0		; B495	POP AF	
	POP	R1		; B496	POP BC	
	POP	R3		; B497	POP HL	
	RETURN			; B498	RET	

LB499:	.BYTE	000,127,165,127,120, 000,122,105,125,120
	.BYTE	000,162,127,167,160, 000,122,125,165,040
	.BYTE	000,127,165,125,040, 007,167,165,167,167
	.BYTE	004,124,125,122,105, 007,124,125,122,167
	.BYTE	004,124,125,122,106 ,007,127,167,122,165
        .EVEN

LB4CB:	.WORD	0		; Temporary place for HL
LB4CD:	.WORD	LB8F0		; Mask and Sprite address
LB4CF:	.BYTE	104		; Attribute?
        .EVEN
	
; Show Info Screen
LB4D0:	MOVB	#6, LB4CF		; B4D0	LD A,$06	
					; B4D2	LD ($B4CF),A	
	CALL	LB2DA			; B4D5	CALL $B2DA	Prepare shadow screen
	MOV	#<LDBC0+1925.>, R1	; B4D8	LD BC,$E345	
	MOV	#LC040, R2		; B4DB	LD DE,$C040	Sprite: Vorton looking forward
	CALL	L9A70			; B4DE	CALL $8F82	JP 9A70 Draw sprite with no shift
	MOV	#<LDBC0+2052.>, R1	; B4E1	LD BC,$E3C4	
	MOV	#LC040, R2		; B4E4	LD DE,$C040	Sprite: Vorton looking forward
	CALL	L9A70			; B4E7	CALL $8F82	JP 9A70 Draw sprite with no shift
	MOV	#<LDBC0+2179.>, R1	; B4EA	LD BC,$E443	
	MOV	#LC040, R2		; B4ED	LD DE,$C040	Sprite: Vorton looking forward
	CALL	L9A70			; B4F0	CALL $8F82	JP 9A70 Draw sprite with no shift
	MOV	#<LDBC0+2306.>, R1	; B4F3	LD BC,$E4C2	
	MOV	#LC040, R2		; B4F6	LD DE,$C040	Sprite: Vorton looking forward
	CALL	L9A70			; B4F9	CALL $8F82	JP 9A70 Draw sprite with no shift
	MOV	#<LDBC0+2504.>, R1	; B4FC	LD BC,$E588	
	MOV	#LD240, R2		; B4FF	LD DE,$D240	Sprite: Lasertron
	CALL	L9933			; B502	CALL $8F85	JP 9933 Draw sprite with shift by -2px
	MOV	#<LDBC0+2914.>, R1	; B505	LD BC,$E722	
	MOV	#LD630, R2		; B508	LD DE,$D630	Sprite: Main Vorton looking at player
	CALL	L99D1			; B50B	CALL $8F7C	JP 99D1 Draw sprite with shift by 4px
	CALL	LB39A			; B50E	CALL $B39A	Prepare screen with attributes
	CALL	LB52D			; B511	CALL $B52D	Print Small Font Signs
	MOV	#LB7B5, R3		; B514	LD HL,$B7B5	
	CALL	LB890			; B517	CALL $B890	Print Text
	;TODO

	RETURN ;STUB

; Print Small Font Signs on the Info Screen
LB52D:
	RETURN ;STUB

; Info Screen Text
LB7B5:	.WORD	112515
	.BYTE	130,212,121,145,144,137,116,146,137,142,144,137,136,143,212,377	; AUTO-VORTONS
	.WORD	117520
	.BYTE	131,212,134,121,143,125,142,144,142,137,136,212,377,000		; LASERTRON
	.WORD	124505
	.BYTE	131,212,135,121,131,136,115,146,137,142,144,137,136,212,377,000	; MAIN VORTON
	.WORD	131507
	.BYTE	132,212,151,137,145,142,115,135,131,143,143,131,137,136,212,377	; YOUR MISSION
	.WORD	125731
	.BYTE	131,212,123,137,136,144,142,137,134,143,212,377			; CONTROLS
	.WORD	130331
	.BYTE	131,101,377,000							; I
	.WORD	130336
	.BYTE	131,137,377,000							; O
	.WORD	131531
	.BYTE	132,141,377,000							; Q
	.WORD	131536
	.BYTE	132,140,377,000							; P
	.WORD	132731
	.BYTE	132,152,377,000							; Z
	.WORD	132733
	.BYTE	132,135,377,000							; M
	.WORD	132736
	.BYTE	132,112,377,000							; ' '
	.WORD	134131
	.BYTE	132,130,377,000							; H
	.WORD	135331
	.BYTE	132,121,377,000							; A
	.WORD	135333
	.BYTE	132,127,377,000							; G
	.WORD	142307
	.BYTE	132,212,140,142,125,143,143,115,121,136,151,115,133,125,151,115	; PRESS ANY KEY
	.BYTE	147,130,125,136,115,142,125,121,124,151,212,377			; WHEN READY
	.WORD	105512
	.BYTE	130,312,130,131,127,130,147,121,151,115,115,125,136,123,137,145 ; HIGHWAY
	.BYTE	136,144,125,142,312,377						; ENCOUNTER
	.WORD	106710
	.BYTE	130,212,123,134,121,143,143,131,126,131,125,124,115,131,136,126 ; CLASSIFIED
	.BYTE	137,142,135,121,144,131,137,136,212,376				; INFORMATION
	.EVEN

; Routine: Print Text
LB890:
	MOV	#176640, R4		; Адрес порта адреса косвенной записи УКНЦ
	MOV	#176642, R5		; Адрес порта данных косвенной записи УКНЦ
;NOTE: I removed the first pass needed to fill in screen attributes
;NOTE: I added even address alignment after byte 377
LB8BB:	MOV	(R3)+, R2	; B8BB	LD D,(HL)	
				; B8BC	INC HL	
				; B8BD	LD E,(HL)	
				; B8BE	INC HL	
	INC	R3		; B8BF	INC HL	
LB8C0:	MOVB	(R3)+, R0	; B8C0	LD A,(HL)	
	BIC    	#177400, R0	; B8C1	INC HL	
	CMP	R0, #254.	; B8C2	CP $FE	
	BLO	LB8C9		; B8C4	JR C,$B8C9	
	BNE	1$		
	RETURN                  ; B8C6	RET Z	
1$:	BIT	#1, R3
	BEQ	LB8BB
	INC	R3			; Alignment to an even address
	BR	LB8BB		; B8C7	JR $B8BB
LB8C9:	BIC	#177700, R0	; B8C9	AND $3F	
	PUSH	R3		; B8CB	PUSH HL	
	MOV	R0, R3		; B8CC	LD L,A	
				; B8CD	LD H,$00	
				; B8CF	PUSH HL	
	ASL	R3		; B8D0	ADD HL,HL	
	ASL	R3		; B8D1	ADD HL,HL	
				; B8D2	POP BC	
	ADD	R0, R3		; B8D3	ADD HL,BC	HL <- HL * 5
	ADD	#L5B00, R3	; B8D4	LD BC,$5B00	
				; B8D7	ADD HL,BC	
	PUSH	R2		; B8D8	PUSH DE	
				; B8D9	XOR A	
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	#000, (R5)	; B8DA	LD (DE),A	write to the screen
				; B8DB	LD A,$7F	
	ADD	#000120, R2	; B8DD	INC D		next line
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	#077577, (R5)	; B8DE	LD (DE),A	write to the screen
	ADD	#000120, R2	; B8DF	INC D		next line
	MOV	#5, R1		; B8E0	LD B,$05	counter = 5
LB8E2:	MOVB	(R3), R0	; B8E2	LD A,(HL)	
	SWAB	R0
	BISB	(R3)+, R0
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	R0, (R5)	; B8E3	LD (DE),A	write to the screen
	ADD	#000120, R2	; B8E4	INC D		next line
				; B8E5	INC HL	
	SOB	R1, LB8E2	; B8E6	DJNZ $B8E2	repeat
				; B8E8	LD A,$7F	
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	#077577, (R5)	; B8EA	LD (DE),A	write to the screen
	POP	R2		; B8EB	POP DE	
	INC	R2		; B8EC	INC DE		next position on the screen
	POP	R3		; B8ED	POP HL	
	BR	LB8C0		; B8EE	JR $B8C0	


.INCLUDE /SPRITE.MAC/

LD900:	.BLKB	704.

; Shadow screen, 24. char-lines, 24. * 8. lines, 32. * 24. * 8. = 6144. bytes
LDBC0:	.BLKB	832.
LDF00:	.BLKB	<6144.-832.>
	.BLKB	152.

	.EVEN
STACK::	.BLKW	100			; For stack

	.END	START
