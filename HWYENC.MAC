	.TITLE	EXPRES
	.MCALL	.EXIT

.MACRO	PUSH	RR
	MOV	RR,-(SP)
.ENDM
.MACRO	POP	RR
	MOV	(SP)+,RR
.ENDM

	.ASECT
	.=001000
START::
	CLR	@#177560
	MOV	SP, OSTACK		; Сохраняем начальное значение SP

	MOV	#GAMESC, R1		; Строка для подготовки игрового экрана
	CALL	PRINT
	CALL	PAUSE			; подождём пока очистится экран

	CALL	LB0DE	; Start point
	CALL	PAUSE

; Game screen start address: #105504

FINISH:
	MOV	OSTACK, SP	; Восстанавливаем стек
	MOV	#EXITSC, R1	; Строка очистки экрана перед выходом
	CALL	PRINT
	.EXIT

OSTACK:	.WORD	40000		; Начальное значение SP
GAMESC:	; Строка подготовки игрового экрана
	.BYTE	33,246,62		; Формат экрана 40x24
	.BYTE	33,240,63		; Цвет символа
	.BYTE	33,241,60		; Цвет знакоместа 0
	.BYTE	33,242,60		; Цвет фона 0
	.BYTE	14			; Clear screen
	.BYTE	0
	.EVEN
EXITSC:	; Строка очистки экрана перед выходом
	.BYTE	33,246,061	; Формат экрана 80x24
	.BYTE	33,240,67	; Цвет символа
	.BYTE	33,241,61	; Цвет знакоместа 1
	.BYTE	33,242,61	; Цвет фона 1
	.BYTE	14		; Очистить экран
	.ASCII	/BYE!/
	.BYTE	0
	.EVEN

; Подпрограмма: Печать строки: R1 = адрес строки, строка завершается 0; портит R0
PRINT:
PR0:	MOVB	(R1)+, R0		; Конец строки?
	BEQ	PR2			; да => завершаем
PR1:	TSTB	@#177564		; Источник канала 0 готов?
	BPL	PR1			; нет => ждём
	MOV	R0, @#177566		; передаём символ в канал 0
	BR	PR0
PR2:	RETURN

;Подпрограмма: пауза после очистки экрана чтобы ПП закончил работу
PAUSE:	; Pause to let PPU finish the previous commands
	MOV	#177777, R5
PAUSE0:	NOP
	SOB	R5, PAUSE0
	RETURN

; Подпрограмма: Ожидание символа с клавиатуры: R0 = полученный символ
WTKEY:	TSTB	@#177560
	BPL	WTKEY
	CLR	R0
	MOVB	@#177562,R0	; символ в R0
	CMPB	R0, #33
	BNE	2$
1$:	TSTB	@#177560
	BPL	1$
	BIS	#15400,R0	; #33 в верхний байт
2$:	RETURN

;------------------------------------------------------------------------------

.INCLUDE /SPRITE.MAC/

;------------------------------------------------------------------------------

	.=51400

LD900:	.BLKB	704.
; Shadow screen, 24. char-lines, 24. * 8. lines, 32. * 24. * 8. = 6144. bytes
LDBC0:	.BLKB	832.
LDF00:	.BLKB	2560.
LE900:	.BLKB	512.			; Условное начало второго теневого экрана
LEB00:	.BLKB	4608.
LFD00:	.BLKB	553.			; Область маркеров отрисовки
LFF29:	.BYTE	0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0
	.BYTE	0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0
	.EVEN

;------------------------------------------------------------------------------

	.=075000

L7A00:	.BYTE	200,324,020,325,240,325,060,326,300,326,120,327,340,327,160,330
	.BYTE	100,322,320,322,140,323,360,323,040,321,260,321,040,321,260,321
	.BYTE	000,320,220,320,000,320,220,320,000,307,220,307,040,310,260,310
	.BYTE	100,311,320,311,140,312,360,312,200,313,020,314,240,314,060,315
	.BYTE	300,315,120,316,340,316,160,317,200,302,020,303,240,303,060,304
	.BYTE	320,300,320,300,320,300,320,300,300,304,120,305,340,305,160,306
	.BYTE	360,301,360,301,360,301,360,301,140,301,140,301,140,301,140,301
	.BYTE	100,300,100,300,100,300,100,300,240,272,060,273,240,272,060,273
	.BYTE	340,274,340,274,340,274,340,274,340,274,340,274,340,274,340,274
	.BYTE	160,275,160,275,160,275,160,275,160,275,160,275,160,275,160,275
	.BYTE	000,276,000,276,000,276,000,276,000,276,000,276,000,276,000,276
	.BYTE	220,276,220,276,220,276,220,276,220,276,220,276,220,276,220,276
	.BYTE	040,277,040,277,040,277,040,277,040,277,040,277,040,277,040,277
	.BYTE	260,277,260,277,260,277,260,277,260,277,260,277,260,277,260,277
	.BYTE	300,273,300,273,300,273,300,273,120,274,020,272,200,271,120,274
	.BYTE	020,272,020,272,020,272,020,272,320,300,320,300,320,300,320,300
L7B00:	.BYTE	376,336,001,231,334,330,002,002,001,014,021,054,004,044,164,002
	.BYTE	066,120,002,246,324,140,006,000,000,004,022,334,000,070,120,002
	.BYTE	076,120,002,045,324,140,012,000,000,004,015,334,000,100,120,002
	.BYTE	106,120,002,244,323,140,012,000,000,004,015,334,000,110,120,002
	.BYTE	000,170,002,222,325,110,006,000,000,000,020,204,000,000,170,002
	.BYTE	066,212,002,015,321,150,032,006,000,010,015,334,000,040,306,001
	.BYTE	010,330,001,375,336,150,032,001,001,000,015,334,000,022,316,001
	.BYTE	000,332,001,136,337,150,032,001,000,004,015,334,000,006,324,001
	.BYTE	100,216,002,054,320,150,032,006,000,014,015,334,000,050,330,001
	.BYTE	066,322,001,166,334,150,032,000,000,010,015,334,000,066,322,001
	.BYTE	102,326,001,165,333,150,032,000,000,010,015,334,000,102,326,001
	.BYTE	044,300,003,366,276,350,030,000,000,010,015,260,000,050,264,003
	.BYTE	044,310,003,167,276,350,030,000,000,010,015,260,000,040,334,003
	.BYTE	044,320,003,370,275,350,032,000,000,010,015,260,000,055,356,003
	.BYTE	064,264,003,263,276,120,032,000,000,000,015,232,000,064,372,003
	.BYTE	024,334,003,074,276,120,003,000,001,000,021,232,006,024,262,005
L7C00:	.BYTE	074,264,003,062,276,100,005,002,001,000,017,156,002,102,264,003
	.BYTE	014,334,003,275,276,100,005,002,001,000,017,156,006,010,334,003
	.BYTE	054,034,003,241,310,130,027,000,000,000,015,260,000,054,370,002
	.BYTE	054,044,003,042,310,130,006,000,000,000,020,260,000,020,060,003
	.BYTE	064,034,003,040,310,130,006,000,000,000,022,260,000,070,060,003
	.BYTE	034,054,003,245,310,130,027,000,000,000,015,260,000,034,010,003
	.BYTE	034,064,003,046,310,130,003,000,001,000,021,260,006,070,262,005
	.BYTE	024,064,003,247,310,130,002,000,001,000,021,260,004,044,344,002
	.BYTE	376,262,002,266,320,330,002,004,001,014,021,054,004,030,356,002
	.BYTE	376,372,002,031,311,330,002,004,001,010,021,054,004,060,356,002
	.BYTE	044,220,004,020,262,060,003,004,001,010,021,102,004,044,220,004
	.BYTE	024,200,004,020,264,060,003,002,001,010,022,102,002,024,200,004
	.BYTE	074,144,004,110,263,150,032,000,000,000,015,334,000,074,144,004
	.BYTE	000,100,004,113,271,140,012,000,000,000,015,334,000,000,100,004
	.BYTE	010,100,004,312,270,140,012,000,000,000,015,334,000,010,100,004
	.BYTE	076,250,004,360,256,140,012,000,000,004,015,334,000,100,250,004
	.BYTE	106,250,004,157,256,140,012,000,000,004,015,334,000,110,250,004
	.BYTE	010,350,004,137,256,340,026,000,000,000,015,204,000,010,350,004
	.BYTE	020,370,004,340,254,340,026,000,000,000,015,204,000,020,370,004
	.BYTE	010,010,005,143,254,340,026,000,000,000,015,204,000,010,010,005
	.BYTE	000,040,005,147,253,340,026,000,000,000,015,204,000,000,040,005
	.BYTE	000,100,005,153,251,340,026,000,000,000,015,204,000,000,100,005
	.BYTE	020,130,005,354,246,340,026,000,000,000,015,204,000,020,130,005
	.BYTE	110,360,004,330,251,340,026,000,000,000,015,204,000,110,360,004
	.BYTE	070,000,005,334,251,340,026,000,000,000,015,204,000,070,000,005
	.BYTE	110,030,005,135,247,340,026,000,000,000,015,204,000,110,030,005
	.BYTE	100,060,005,141,246,340,026,000,000,000,015,204,000,100,060,005
	.BYTE	044,010,007,337,212,060,003,004,001,010,022,102,004,044,154,006
	.BYTE	025,021,007,102,213,060,003,004,001,010,022,102,004,025,141,006
	.BYTE	063,021,007,136,211,060,003,004,001,014,022,102,004,064,166,006
	.BYTE	006,040,007,106,213,060,003,004,001,004,022,102,004,006,212,006
	.BYTE	102,040,007,176,207,060,003,004,001,014,022,102,004,102,204,006
L7E00:	.BYTE	010,370,007,301,175,070,004,000,001,000,020,130,000,010,370,007
	.BYTE	070,020,010,076,171,070,004,002,001,000,022,130,002,070,020,010
	.BYTE	060,000,010,275,172,070,004,004,001,000,017,130,004,060,000,010
	.BYTE	040,010,010,100,173,070,004,001,001,000,020,130,001,040,010,010
	.BYTE	020,040,010,305,172,070,006,001,000,000,017,130,000,034,344,010
	.BYTE	110,110,005,143,244,340,026,000,000,000,015,204,000,110,110,005
	.BYTE	070,140,005,350,243,340,026,000,000,000,015,204,000,070,140,005
	.BYTE	030,070,005,147,250,050,002,002,001,000,021,054,002,030,070,005
	.BYTE	050,040,005,342,250,050,002,006,001,000,021,054,006,050,040,005
	.BYTE	034,354,005,375,234,140,012,000,000,000,015,334,000,034,354,005
	.BYTE	054,354,005,373,233,140,012,000,000,000,015,334,000,054,354,005
	.BYTE	044,364,005,375,233,150,032,000,000,000,015,334,000,044,364,005
	.BYTE	044,354,005,174,234,100,005,006,001,000,020,156,006,044,354,005
	.BYTE	064,050,010,001,170,070,004,001,002,010,017,130,001,064,050,010
	.BYTE	034,024,010,302,172,070,004,007,002,000,020,130,007,034,024,010
	.BYTE	000,160,007,261,206,340,006,000,000,000,020,204,000,020,160,007
	.BYTE	010,160,007,060,206,340,006,000,000,000,022,204,000,070,160,007
	.BYTE	020,170,007,060,205,340,026,000,000,000,015,204,000,020,170,007
	.BYTE	020,200,007,261,204,340,026,000,000,000,015,204,000,020,200,007
	.BYTE	110,160,007,050,202,340,026,000,000,000,015,204,000,110,160,007
	.BYTE	100,160,007,251,202,340,026,000,000,000,015,204,000,100,160,007
	.BYTE	070,170,007,253,202,340,026,000,000,000,015,204,000,070,170,007
	.BYTE	070,200,007,054,202,340,026,000,000,000,015,204,000,070,200,007
	.BYTE	020,160,007,257,205,110,026,000,000,000,015,204,000,000,160,007
	.BYTE	070,160,007,052,203,110,026,000,000,000,015,204,000,010,160,007
	.BYTE	046,050,007,303,210,150,032,000,000,004,015,334,000,046,050,007
	.BYTE	036,070,007,106,210,150,032,000,000,004,015,334,000,036,070,007
	.BYTE	024,072,007,307,210,150,032,000,000,014,015,334,000,024,072,007
	.BYTE	064,104,007,045,206,150,032,000,000,000,015,334,000,064,104,007
	.BYTE	020,170,010,120,165,070,004,003,002,000,022,130,003,020,170,010
	.BYTE	060,160,010,313,163,070,004,004,002,000,021,130,004,060,160,010
	.BYTE	050,206,010,356,162,070,004,003,002,014,020,130,003,050,206,010
L8000:	.BYTE	070,040,011,140,150,350,006,000,000,000,020,260,000,054,344,010
	.BYTE	100,040,011,337,147,350,010,000,000,000,015,260,000,044,340,010
	.BYTE	110,040,011,136,147,350,010,000,000,000,015,260,000,044,350,010
	.BYTE	022,066,011,147,151,150,032,000,000,010,015,334,000,022,066,011
	.BYTE	062,146,011,151,144,150,032,000,000,010,015,334,000,062,146,011
	.BYTE	060,124,011,247,145,100,005,006,001,010,020,156,006,060,124,011
	.BYTE	026,124,011,112,147,100,005,002,001,014,020,156,002,026,124,011
	.BYTE	060,340,011,371,134,140,012,000,000,000,015,334,000,060,340,011
	.BYTE	020,040,012,005,133,140,012,000,000,000,015,334,000,020,040,012
	.BYTE	010,050,012,007,133,140,012,000,000,000,015,334,000,010,050,012
	.BYTE	050,360,011,174,134,100,005,002,001,000,020,156,002,050,360,011
	.BYTE	042,376,011,376,133,100,005,002,001,010,020,156,002,042,376,011
	.BYTE	034,014,012,201,133,100,005,002,001,000,020,156,002,034,014,012
	.BYTE	044,264,012,225,120,140,012,000,000,000,015,334,000,044,264,012
	.BYTE	034,274,012,227,120,140,012,000,000,000,015,334,000,034,274,012
	.BYTE	054,274,012,225,117,140,012,000,000,000,015,334,000,054,274,012
	.BYTE	044,304,012,227,117,140,012,000,000,000,015,334,000,044,304,012
	.BYTE	044,274,012,026,120,170,023,006,002,000,022,102,006,044,274,012
	.BYTE	000,040,013,047,114,340,006,000,000,000,021,204,000,020,060,013
	.BYTE	010,050,013,047,113,340,006,000,000,000,020,204,000,070,060,013
	.BYTE	020,060,013,047,112,340,026,000,000,000,015,204,000,000,040,013
	.BYTE	110,040,013,236,107,340,026,000,000,000,015,204,000,110,040,013
	.BYTE	100,050,013,240,107,340,026,000,000,000,015,204,000,100,050,013
	.BYTE	070,060,013,242,107,340,026,000,000,000,015,204,000,010,050,013
	.BYTE	010,240,013,266,103,170,023,004,001,000,023,102,002,030,366,013
	.BYTE	030,240,013,264,102,170,023,004,002,000,023,102,004,050,366,013
	.BYTE	060,240,013,061,101,170,023,004,001,000,023,102,006,070,366,013
	.BYTE	100,240,013,057,100,170,023,004,002,000,023,102,002,020,020,014
	.BYTE	020,320,013,073,100,170,023,004,002,000,023,102,000,040,020,014
	.BYTE	010,340,013,276,077,170,023,004,002,000,023,102,006,060,020,014
	.BYTE	070,320,013,266,075,170,027,004,000,000,015,102,000,020,330,013
	.BYTE	100,340,013,067,074,170,027,004,000,000,015,102,000,060,320,013
L8200:	.BYTE	030,050,014,105,072,340,027,000,000,000,015,204,000,030,050,014
	.BYTE	060,050,014,302,070,340,027,000,000,000,015,204,000,060,050,014
	.BYTE	040,050,014,304,071,350,027,000,000,000,015,260,000,004,374,013
	.BYTE	050,050,014,103,071,350,027,000,000,000,015,260,000,104,014,014
	.BYTE	050,336,016,071,016,140,012,000,000,014,015,334,000,050,336,016
	.BYTE	036,352,016,034,016,140,012,000,000,010,015,334,000,036,352,016
	.BYTE	006,350,016,277,017,140,012,000,000,004,015,334,000,006,350,016
	.BYTE	064,344,016,031,015,140,012,000,000,000,015,334,000,064,344,016
	.BYTE	104,360,016,130,013,140,012,000,000,010,015,334,000,104,360,016
	.BYTE	020,350,016,036,017,140,012,000,000,000,015,334,000,020,350,016
	.BYTE	102,152,017,350,003,150,003,000,002,000,020,334,004,040,072,021
	.BYTE	062,156,017,252,004,150,032,000,000,010,015,334,000,062,156,017
	.BYTE	072,202,017,354,002,150,032,000,000,000,015,334,000,072,202,017
	.BYTE	072,220,017,015,002,150,032,000,000,014,015,334,000,072,220,017
	.BYTE	070,014,020,175,372,100,005,006,001,010,020,156,006,070,014,020
	.BYTE	070,034,020,177,371,100,005,006,001,010,020,156,006,070,034,020
	.BYTE	020,054,020,006,373,100,005,002,001,010,020,156,002,020,054,020
	.BYTE	020,074,020,010,372,100,005,002,001,010,020,156,002,020,074,020
	.BYTE	004,220,014,024,065,150,032,000,000,010,015,334,000,004,210,014
	.BYTE	014,316,014,273,060,150,032,000,000,004,015,334,000,016,316,014
	.BYTE	010,332,014,075,060,150,032,000,000,004,015,334,000,022,332,014
	.BYTE	044,160,015,054,045,100,005,006,001,010,020,156,006,044,160,015
	.BYTE	054,150,015,052,045,100,005,005,001,010,020,156,005,054,150,015
	.BYTE	034,150,015,054,046,100,005,003,001,010,020,156,003,034,150,015
	.BYTE	000,172,016,362,026,070,004,001,001,004,020,130,001,000,172,016
	.BYTE	110,172,016,151,022,070,004,007,001,004,022,130,007,110,172,016
	.BYTE	032,230,016,162,023,050,002,004,002,014,022,054,004,032,230,016
	.BYTE	056,230,016,060,022,050,002,004,002,004,022,054,004,056,230,016
	.BYTE	022,242,016,125,023,060,003,004,001,000,020,102,004,022,242,016
	.BYTE	072,242,016,320,020,060,003,004,001,000,020,102,004,072,242,016
	.BYTE	050,334,020,231,356,140,012,000,000,010,015,334,000,050,334,020
	.BYTE	040,344,020,233,356,140,005,000,001,010,020,334,005,040,344,020
L8400:	.BYTE	030,354,020,235,356,140,012,000,000,010,015,334,000,030,354,020
	.BYTE	040,364,020,235,355,140,012,000,000,010,015,334,000,040,364,020
	.BYTE	050,354,020,233,355,140,005,000,001,010,020,334,001,050,354,020
	.BYTE	060,344,020,231,355,140,012,000,000,010,015,334,000,060,344,020
	.BYTE	050,344,020,032,356,050,002,000,002,010,021,054,000,050,344,020
	.BYTE	040,354,020,034,356,050,002,000,002,010,021,054,000,040,354,020
	.BYTE	044,112,023,107,310,170,023,004,002,014,023,102,004,044,112,023
	.BYTE	020,160,023,057,307,170,023,004,002,000,023,102,004,020,160,023
	.BYTE	010,206,023,122,306,170,023,004,002,014,023,102,004,010,206,023
	.BYTE	070,160,023,252,304,170,023,004,002,000,023,102,004,070,160,023
	.BYTE	100,206,023,313,302,170,023,004,002,014,023,102,004,100,206,023
	.BYTE	010,000,023,242,316,110,006,000,000,000,017,204,000,010,000,023
	.BYTE	020,010,023,242,315,110,006,000,000,000,020,204,000,020,010,023
	.BYTE	070,010,023,035,313,110,006,000,000,000,022,204,000,070,010,023
	.BYTE	100,000,023,033,313,110,006,000,000,000,020,204,000,100,000,023
	.BYTE	000,330,021,176,341,340,006,000,000,000,021,204,000,000,330,021
	.BYTE	030,300,021,170,341,340,026,000,000,000,015,204,000,030,300,021
	.BYTE	030,310,021,371,340,340,026,000,000,000,015,204,000,030,310,021
	.BYTE	020,310,021,172,341,340,026,000,000,000,015,204,000,020,310,021
	.BYTE	110,330,021,365,334,340,006,000,000,000,020,204,000,110,330,021
	.BYTE	060,300,021,365,337,340,026,000,000,000,015,204,000,060,300,021
	.BYTE	060,310,021,166,337,340,026,000,000,000,015,204,000,060,310,021
	.BYTE	070,310,021,365,336,340,026,000,000,000,015,204,000,070,310,021
	.BYTE	020,350,021,176,337,340,026,000,000,000,015,204,000,020,350,021
	.BYTE	030,350,021,375,336,340,026,000,000,000,015,204,000,030,350,021
	.BYTE	030,360,021,176,336,340,026,000,000,000,015,204,000,030,360,021
	.BYTE	060,350,021,172,335,340,026,000,000,000,015,204,000,060,350,021
	.BYTE	070,350,021,371,334,340,026,000,000,000,015,204,000,070,350,021
	.BYTE	060,360,021,373,334,340,026,000,000,000,015,204,000,060,360,021
	.BYTE	024,110,022,111,331,120,007,000,000,010,015,232,000,020,110,022
	.BYTE	064,110,022,105,327,120,007,000,000,010,015,232,000,074,110,022
	.BYTE	044,110,022,107,330,100,005,002,002,010,020,156,002,044,110,022
L8600:	.BYTE	040,130,021,152,347,060,003,004,002,000,022,102,004,040,130,021
	.BYTE	060,250,021,162,341,060,003,000,002,000,021,102,000,060,250,021
	.BYTE	030,220,021,162,344,070,004,001,002,000,020,130,001,030,220,021
	.BYTE	070,170,021,353,343,070,004,000,002,000,022,130,000,070,170,021
	.BYTE	072,336,024,327,255,150,032,000,000,010,015,334,000,072,336,024
	.BYTE	074,360,024,231,254,150,032,000,000,010,015,334,000,074,360,024
	.BYTE	050,374,024,035,255,150,032,000,000,010,015,334,000,050,374,024
	.BYTE	376,000,000,000,000,000,032,000,000,000,015,000,000,002,120,023
	.BYTE	376,000,000,000,000,000,005,000,001,000,020,000,001,070,050,024
	.BYTE	376,000,000,000,000,000,005,000,001,000,020,000,003,050,066,024
	.BYTE	376,000,000,000,000,000,005,000,001,000,020,000,002,040,100,024
	.BYTE	376,000,000,000,000,000,005,000,001,000,020,000,005,030,132,024
	.BYTE	376,000,000,000,000,000,005,000,001,000,020,000,007,074,136,024
	.BYTE	376,000,000,000,000,000,005,000,001,000,020,000,002,110,116,024
	.BYTE	376,000,000,000,000,000,023,000,002,000,023,000,004,044,132,025
	.BYTE	376,000,000,000,000,000,023,000,002,000,023,000,004,010,144,025
	.BYTE	376,000,000,000,000,000,023,000,002,000,023,000,004,030,144,025
	.BYTE	376,000,000,000,000,000,023,000,002,000,023,000,004,060,144,025
	.BYTE	376,000,000,000,000,000,023,000,002,000,023,000,004,100,144,025
	.BYTE	376,000,000,000,000,000,032,000,000,000,015,000,000,074,314,023
	.BYTE	376,000,000,000,000,000,002,000,001,000,022,000,006,044,010,005
	.BYTE	376,000,000,000,000,000,002,000,001,000,022,000,002,044,056,005
	.BYTE	376,000,000,000,000,000,006,000,000,000,020,000,000,010,170,006
	.BYTE	376,000,000,000,000,000,006,000,000,000,021,000,000,110,250,006
	.BYTE	376,000,000,000,000,000,010,000,000,000,015,000,000,020,170,006
	.BYTE	376,000,000,000,000,000,004,000,002,000,020,000,000,020,350,017
	.BYTE	376,000,000,000,000,000,004,000,002,000,017,000,000,046,350,017
	.BYTE	376,000,000,000,000,000,004,000,002,000,022,000,003,100,350,017
	.BYTE	376,000,000,000,000,000,002,000,002,000,022,000,004,000,310,022
	.BYTE	376,000,000,000,000,000,002,000,002,000,022,000,004,000,270,022
	.BYTE	376,000,000,000,000,000,002,000,002,000,022,000,004,000,250,022
	.BYTE	376,000,000,000,000,000,002,000,002,000,022,000,004,110,310,022
L8800:	.BYTE	376,000,000,000,000,000,002,000,002,000,022,000,004,110,270,022
	.BYTE	376,000,000,000,000,000,002,000,002,000,022,000,004,110,250,022
	.BYTE	376,000,000,000,000,000,010,000,000,000,015,000,000,000,000,016
	.BYTE	376,000,000,000,000,000,010,000,000,000,015,000,000,010,000,016
	.BYTE	376,000,000,000,000,000,010,000,000,000,015,000,000,100,070,016
	.BYTE	376,000,000,000,000,000,010,000,000,000,015,000,000,110,070,016
	.BYTE	376,070,006,000,000,340,026,000,000,000,015,204,000,100,210,014
	.BYTE	376,300,006,000,000,340,026,000,000,000,015,204,000,010,230,014
	.BYTE	376,250,006,000,000,340,026,000,000,000,015,204,000,000,240,014
	.BYTE	376,240,006,000,000,340,026,000,000,000,015,204,000,020,300,014
	.BYTE	376,170,006,000,000,340,026,000,000,000,015,204,000,010,340,014
	.BYTE	376,130,006,000,000,340,026,000,000,000,015,204,000,110,350,014
	.BYTE	376,150,006,000,000,340,026,000,000,000,015,204,000,060,310,014
	.BYTE	376,100,006,000,000,340,026,000,000,000,015,204,000,070,260,014
	.BYTE	006,036,026,106,235,370,006,000,000,000,021,232,000,006,202,025
	.BYTE	025,036,026,144,234,370,006,000,000,000,017,232,000,025,203,025
	.BYTE	044,036,026,142,233,370,006,000,000,004,022,232,000,044,172,025
	.BYTE	063,036,026,200,232,370,006,000,000,004,020,232,000,063,203,025
	.BYTE	102,036,026,176,231,370,006,000,000,010,021,232,000,102,202,025
	.BYTE	050,214,025,057,244,050,025,002,001,010,022,156,002,050,214,025
	.BYTE	006,202,025,362,246,110,031,000,000,010,015,204,000,006,202,025
	.BYTE	025,203,025,360,245,110,031,000,000,014,015,204,000,025,203,025
	.BYTE	044,202,025,016,245,110,031,000,000,014,015,204,000,044,202,025
	.BYTE	063,203,025,015,244,110,031,000,000,000,015,204,000,063,203,025
	.BYTE	102,202,025,053,243,110,031,000,000,000,015,204,000,102,202,025
	.BYTE	050,374,025,075,235,050,025,006,001,010,022,156,006,050,374,025
	.BYTE	006,230,000,365,362,370,031,000,000,004,015,232,000,006,230,000
	.BYTE	022,230,000,063,362,370,031,000,000,014,015,232,000,022,230,000
	.BYTE	036,230,000,162,361,370,031,000,000,004,015,232,000,036,230,000
	.BYTE	052,230,000,260,360,370,031,000,000,014,015,232,000,052,230,000
	.BYTE	066,230,000,357,357,370,031,000,000,004,015,232,000,066,230,000
	.BYTE	102,230,000,055,357,370,031,000,000,014,015,232,000,102,230,000

L8A00:	.BYTE	034,250,003,364,300,000,000,005
L8A08:	.BYTE	000,010,016,000,000,044,260,000
L8A10:	.BYTE	044,230,003,161,301,160,020,000,001,010,015,000,000,030,130,000
L8A20:	.BYTE	044,240,003,362,300,160,020,000,001,010,015,000,000,060,144,000
	.BYTE	044,250,003,163,300,160,020,000,001,010,015,000,000,030,160,000
L8A40:	.BYTE	044,260,003,364,277,160,020,000,001,010,015,000,000,060,174,000
	.BYTE	044,270,003,165,277,020,011,000,000,010,015,306,000,044,300,000
L8A60:	.BYTE	376,171,002,115,323,030,001,000,004,014,021,026,000,376,260,000
	.BYTE	376,316,003,134,300,030,001,000,004,014,022,026,000,376,260,000
	.BYTE	376,322,003,035,300,030,001,000,004,004,021,026,000,376,260,000

; Массив записей длиной по 16. байт каждая
; последние слова записи -- адрес куда копируются первые 14. байт
L8A90:	.BYTE	012,172,003,021,305,340,026,000,000,000,015,204,000,012
	.WORD	<L7B00+360>
	.BYTE	010,254,003,027,302,120,007,000,000,010,015,232,000,010
	.WORD	<L7B00+420>
	.BYTE	024,172,003,157,304,340,026,000,000,014,015,204,000,024
	.WORD	<L7B00+440>
	.BYTE	024,204,003,321,303,340,026,000,000,000,015,204,000,024
	.WORD	<L7B00+460>
	.BYTE	377,254,003,027,302,120,007,000,000,010,015,232,000,010
	.WORD	<L7B00+420>
	.BYTE	024,172,003,157,304,340,026,000,000,014,015,204,000,024
	.WORD	<L7B00+440>
	.BYTE	024,204,003,321,303,340,026,000,000,000,015,204,000,024
	.WORD	<L7B00+460>
	.BYTE	377,172,003,021,305,340,026,000,000,000,015,204,000,012
	.WORD	<L7B00+360>
	.BYTE	062,022,003,377,310,170,023,004,001,000,022,102,004,062
	.WORD	<L7B00+400>
	.BYTE	010,254,003,027,302,120,007,000,000,010,015,232,000,010
	.WORD	<L7B00+420>
	.BYTE	024,172,003,157,304,340,026,000,000,014,015,204,000,024
	.WORD	<L7B00+440>
	.BYTE	024,204,003,321,303,340,026,000,000,000,015,204,000,024
	.WORD	<L7B00+460>
	.BYTE	377,204,003,321,303,340,026,000,000,000,015,204,000,024
	.WORD	<L7B00+460>
	.BYTE	377,204,003,321,303,340,026,000,000,000,015,204,000,024
	.WORD	<L7B00+460>
	.BYTE	377,056,003,377,305,100,005,002,001,014,020,156,006,067
	.WORD	<L7B00+340>
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377

	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377

L8D52:	.BYTE	151,040,212, 000
	.WORD	L8A40
	.BYTE	101,060,212, 043
	.WORD	L8A20
	.BYTE	000,320,212, 060
	.WORD	L8A90
	.BYTE	000,360,212, 000
	.WORD	L8A10
	.BYTE	000,020,212, 000
	.WORD	L8A00
	.BYTE	000,300,212, 000
	.WORD	L8A90
	.BYTE	000,360,212
	.BYTE	000,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377
	.BYTE	377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,000
	.BYTE	000,002,000,004,340,377,341,377,377,001,000,004,000,000,001,000
	.BYTE	376,000,000,004,040,000,041,000,377,377,377,000,040,000,040,000
	.BYTE	000,376,377,374,040,000,037,000,001,377,377,374,000,000,377,377
	.BYTE	002,000,000,374,340,377,337,377,001,001,000,000,340,377,340,377
	.BYTE	000,004,000,010,300,377,301,377,376,002,000,010,000,000,001,000
	.BYTE	374,000,000,010,100,000,101,000,376,376,377,000,100,000,100,000
	.BYTE	000,374,377,370,100,000,077,000,002,376,377,370,000,000,377,377
	.BYTE	004,000,000,370,300,377,277,377,002,002,000,000,300,377,300,377
	.BYTE	000,006,000,014,240,377,241,377,375,003,000,014,000,000,001,000
	.BYTE	372,000,000,014,140,000,141,000,375,375,377,000,140,000,140,000
	.BYTE	000,372,377,364,140,000,137,000,003,375,377,364,000,000,377,377
	.BYTE	006,000,000,364,240,377,237,377,003,003,000,000,240,377,240,377
	.BYTE	000,010,000,000,201,377,201,377,374,004,000,000,001,000,001,000
	.BYTE	370,000,000,000,201,000,201,000,374,374,377,000,200,000,200,000
	.BYTE	000,370,377,000,177,000,177,000,004,374,377,000,377,377,377,377
	.BYTE	010,000,000,000,177,377,177,377,004,004,000,000,200,377,200,377

;------------------------------------------------------------------------------

; Variables
L8F01:	.WORD	L8A00
L8F03:	.WORD	5352
L8F05:	.WORD	0
L8F07:	.WORD	260
L8F09:	.WORD	200
L8F00:	.BYTE	001	;NOTE: Moved here to align words without a filler
L8F0B:	.BLKB	3.
L8F0E:	.BYTE	0
L8F0F:	.BYTE	0
L8F10:	.BLKB	3.
L8F13:	.BYTE	0
L8F14:	.BYTE	0
L8F15:	.BYTE	0
L8F16:	.BYTE	0
L8F17:	.BYTE	206
L8F18:	.BYTE	226	; Low part of attribute address $5Axx
L8F19:	.BYTE	326
L8F1A:	.WORD	6654
L8F1C:	.BYTE	1
L8F1D:	.BLKB	5.
L8F22:	.BYTE	0
L8F23:	.BYTE	0
; Initial values for the Variables block
L8F25:
	.WORD	L8A00
	.WORD	5352
	.WORD	0
	.WORD	260
	.WORD	200
	.BYTE	001	;NOTE: Moved here to align words without a filler
	.BYTE	000,000,000, 000,000, 004,000,004,000
	.BYTE	0
	.BYTE	0
	.BYTE	0
	.BYTE	206
	.BYTE	226
	.BYTE	326
	.WORD	6654
	.BYTE	001
	.BYTE	000,000,000,000,000
	.BYTE	000
L8F48:	.BYTE	0
	.WORD	0	;HACK to align L8F4A to proper address
L8F4A:	.BYTE	000,000,030,026,050,054,060,102,070,130,100,156,110,204,120,232
	.BYTE	130,260,020,306,140,334,160,000,040,026,170,054,170,102,070,130
	.BYTE	050,156,340,204,370,232,350,260,360,306,150,334,303,160,242
	.EVEN

;------------------------------------------------------------------------------

; Routine
L92CE:	MOV	#L8D52, R3	; 92CE	LD HL,$8D52	
	CLRB	(R3)		; 92D1	LD (HL),$00	
	MOV	#L8A90, R4	; 92D3	LD IX,$8A90	адрес начала массива записей
L92D7:	MOVB	(R4), R0	; 92D7	LD A,(IX+$00)	
	CMPB	#377, R0	; 92DA	CP $FF	        первый байт записи = 255.?
	BEQ	L92F5		; 92DC	JR Z,$92F5	да => переходим
	MOV	16(R4), R3	; 92DE	LD L,(IX+$0E)	получаем адрес куда копировать
				; 92E1	LD H,(IX+$0F)	
	MOV	R4, R2		; 92E4	LD E,IXl	
				; 92E6	LD D,IXh	
				; 92E8	EX DE,HL	
	MOV	#14., R1	; 92E9	LD BC,$000E	14. байт
1$:	MOVB	(R2)+, (R3)+	; 92EC	LDIR	        копируем
	SOB	R1, 1$
				; 92EE	LD BC,$0010	
	ADD	#16., R4	; 92F1	ADD IX,BC	переходим к следующей записи
	BR	L92D7		; 92F3	JR $92D7	
L92F5:
	MOV	L8F01, R3	; 92F5	LD HL,($8F01)	
	INC	R3		; 92F8	INC HL	
	MOVB	(R3)+, R2	; 92F9	LD E,(HL)	
	BIC	#177400, R2	; 92FA	INC HL	
	SWAB	R2
	BISB	(R3), R2	; 92FB	LD D,(HL)	
	SWAB	R2
	CMP	R2, #260	; 92FC	LD A,D	
				; 92FD	AND A	
				; 92FE	JR NZ,$930A	
				; 9300	LD A,E	
				; 9301	CP $B0	
	BHIS	L930A		; 9303	JR NC,$930A	
	DEC	R3		; 9305	DEC HL	
	MOVB	#260, (R3)	; 9306	LD (HL),$B0	
				; 9308	LD E,A	
	MOVB	(R3), R2	; 9309	LD E,(HL)
L930A:	MOV	#1, R0		; 930A	LD A,$01	
	MOV	#260, R3	; 930C	LD HL,$00B0	
	MOV	#3760, R4	; 930F	LD IX,$07F0	
L9313:				; 9313	EX AF,AF'	
	PUSH	R2		; 9314	PUSH DE	
				; 9315	EX DE,HL	
				; 9316	AND A	
	SUB	R3, R2		; 9317	SBC HL,DE	
				; 9319	EX DE,HL	
	CMP	R2, #260	; 931A	LD A,D	
				; 931B	AND A	
				; 931C	JR NZ,$9323	
				; 931E	LD A,E	
				; 931F	CP $B0	
	BLO	L9331		; 9321	JR C,$9331	
L9323:	POP	R2		; 9323	POP DE	
	MOV	#260, R1	; 9324	LD BC,$00B0	
	ADD	R1, R3		; 9327	ADD HL,BC	
	MOV	#5352, R1	; 9328	LD BC,$0AEA	
	ADD	R1, R4		; 932B	ADD IX,BC	
				; 932D	EX AF,AF'	
	INC	R0		; 932E	INC A	
	BR	L9313		; 932F	JR $9313	
L9331:	POP	R2		; 9331	POP DE	
	MOV	R3, L8F07	; 9332	LD ($8F07),HL	
	MOV	#177720, R1	; 9335	LD BC,$FFD0	
	ADD	R1, R3		; 9338	ADD HL,BC	
	MOV	R3, L8F09	; 9339	LD ($8F09),HL	
	MOV	#177600, R1	; 933C	LD BC,$FF80	
	ADD	R1, R3		; 933F	ADD HL,BC	
	MOV	R3, L8F05	; 9340	LD ($8F05),HL	
	MOV	R4, L8F03	; 9343	LD ($8F03),IX	
	MOV	#L8F00, R3	; 9347	LD HL,$8F00	
			; 934A	EX AF,AF'	
	MOVB	R0, L8F1C	; 934B	LD ($8F1C),A	
	CMPB	R0, #40		; 934E	CP $20	
	BLO	L9359		; 9350	JR C,$9359	
	MOV	#40, R0		; 9352	LD A,$20	
	MOVB	R0, (R3)	; 9354	LD (HL),A	
	DEC	R0		; 9355	DEC A	
	BR	L935A		; 9356	JP $935A	
L9359:	MOVB	R0, (R3)	; 9359	LD (HL),A	
L935A:	MOV	R0, R1		; 935A	LD B,A	
	MOV	#37, R0		; 935B	LD A,$1F	31.
	MOV	#10., R5	; 935D	LD C,$0A	
	SUB	R1, R0		; 935F	SUB B	
	CMP	R0, #10.	; 9360	CP C	
	BHIS	L9367		; 9361	JR NC,$9367	
	MOV	#10., R1	; 9363	LD B,C	
	MOV	R0, R5		; 9364	LD C,A	
	BR	L936F		; 9365	JR $936F	
L9367:	CLR	R1		; 9367	LD B,$00	
L9369:	INC	R1		; 9369	INC B		в B набираем старшую десятичную цифру
	SUB	R5, R0		; 936A	SUB C		-10.
	CMP	R0, R5		; 936B	CP C		< 10. ?
	BHIS	L9369		; 936C	JR NC,$9369	нет => повторяем
	MOV	R0, R5		; 936E	LD C,A		сохраняем младшую цифру
L936F:	MOV	R1, R0		; 936F	LD A,B		работаем со старшей цифрой
	ADD	R0, R0		; 9370	ADD A,A		= X*2
	ADD	R1, R0		; 9371	ADD A,B		= X*2+X
	ADD	R0, R0		; 9372	ADD A,A		= (X*2+X)*2 = X*6
	MOV	#L94F9, R3	; 9373	LD HL,$94F9	адрес списка с индексами спрайтов для больших цифр
	MOV	R0, R2		; 9376	LD D,$00	
				; 9378	LD E,A	
	MOV	R5, R0		; 9379	LD A,C		берём младшую цифру
	ADD	R0, R0		; 937A	ADD A,A		= X*2
	ADD	R5, R0		; 937B	ADD A,C		= X*2+X
	ADD	R0, R0		; 937C	ADD A,A		= (X*2+X)*2 = X*6
	PUSH	R0		; 937D	EX AF,AF'	
	ADD	R2, R3		; 937E	ADD HL,DE	
	MOV	#L95E3, R4	; 937F	LD IX,$95E3	адрес массива адресов на экране
	CALL	L9394		; 9383	CALL $9394	вывод первой цифры
	MOV	#L94F9, R3	; 9386	LD HL,$94F9	адрес списка с индексами спрайтов для больших цифр
				; 9389	LD D,$00	
	POP	R0		; 938B	EX AF,AF'	
				; 938C	LD E,A	
	ADD	R0, R3		; 938D	ADD HL,DE	
	CALL	L9394		; 938E	CALL $9394	вывод второй цифры
	BR	L93B7		; 9391	JP $93B7	

; Подпрограмма: Вывод цифры размером 16x24 пикселей в индикатор ZONE
; R3 = адрес массива из 6-ти номеров спрайтов 8x8
; R4 = адрес массива из 6-ти адресов на экране
L9394:	MOV	#6, R5		; 9394	LD C,$06	нужно вывести 6. спрайтов
L9396:	MOVB	(R3)+, R2	; 9396	LD E,(HL)	взяли номер спрайта
	PUSH	R3		; 9397	PUSH HL	
				; 9398	LD D,$00	
	MOV	R2, R3		; 939A	LD HL,$953B	
				; 939D	EX DE,HL	
	ADD	R3, R3		; 939E	ADD HL,HL	
	ADD	R3, R3		; 939F	ADD HL,HL	
	ADD	R3, R3		; 93A0	ADD HL,HL	*8.
	ADD	#L953B, R3	; 93A1	ADD HL,DE	получили адрес спрайта 8x8
	MOV	(R4)+, R2	; 93A2	LD E,(IX+$00)	адрес на экране
				; 93A5	LD D,$50	
	MOV	#8., R1		; 93A7	LD B,$08	счётчик = 8.
L93A9:	MOVB	(R3)+, R0	; 93A9	LD A,(HL)	получаем 8 пикселов спрайта
	BIC	#177400, R0
	SWAB	R0
	MOV	R2, @#176640	; 93AA	LD (DE),A	пишем в экран
	MOV	R0, @#176642	; 93AB	INC HL	
	ADD	#80., R2	; 93AC	INC D		next line
	SOB	R1, L93A9	; 93AD	DJNZ $93A9	повторяем
	POP	R3		; 93AF	POP HL	
				; 93B0	INC HL	
				; 93B1	INC IX	
				; 93B3	DEC C	
	SOB	R5, L9396	; 93B4	JR NZ,$9396	повторяем
	RETURN			; 93B6	RET

; Routine
L93B7:
	MOV	#L7B00, R4	; 93B7	LD IX,$7B00	
	MOV	#L8A90, R2	; 93BB	LD DE,$8A90	
	MOV	#44., R5	; 93BE	LD A,$2C	счётчик цикла
				; 93C0	EX AF,AF'	
L93C1:	MOVB	(R4), R0	; 93C1	LD A,(IX+$00)	<
	BIC	#177400, R0			;	|
	CMPB	R0, #376	; 93C4	CP $FE		|
	BHIS	L93F2		; 93C6	JR NC,$93F2	
	MOVB	2(R4), R3	; 93C8	LD L,(IX+$01)	
	BIC	#177400, R3     ; 93CB	LD H,(IX+$02)	
	SWAB	R3
	BISB	1(R4), R3	
	MOV	L8F05, R1	; 93CE	LD BC,($8F05)	
				; 93D2	AND A	
	SUB	R1, R3		; 93D3	SBC HL,BC	
				; 93D5	LD A,H	
	CMP	R3, #512.	; 93D6	CP $02		больше или равно 512. ?
	BHIS	L93F2		; 93D8	JR NC,$93F2	да => переходим
	MOV	#14., R1	; 93DA	LD BC,$000E	14. байт
				; 93DD	EX DE,HL	
	MOV	R4, R3		; 93DE	LD E,IXl	откуда копируем -- начало текущей записи
				; 93E0	LD D,IXh	
				; 93E2	EX DE,HL	
1$:	MOVB	(R3)+, (R2)+	; 93E3	LDIR		копируем
	SOB	R1, 1$
	MOV	R4, R0		; 93E5	LD A,IXl	
	MOVB	R0, (R2)+	; 93E7	LD (DE),A	
				; 93E8	INC DE	
	SWAB	R0		; 93E9	LD A,IXh	
	MOVB	R0, (R2)+	; 93EB	LD (DE),A	
				; 93EC	INC DE	
				; 93ED	EX AF,AF'	
	DEC	R5		; 93EE	DEC A	
				; 93EF	EX AF,AF'	
	BEQ	L93FD		; 93F0	JR Z,$93FD	
L93F2:	ADD	#16., R4	; 93F2	LD BC,$0010	
				; 93F5	ADD IX,BC	|
	CMP	R4, #L8A00	; 93F7	LD A,IXh	| дошли до 8A00 ?
				; 93F9	CP $8A		нет => продолжаем цикл
	BLO	L93C1		; 93FB	JR C,$93C1	
;
L93FD:	MOVB	#377, (R2)	; 93FD	LD A,$FF	
				; 93FF	LD (DE),A	
	MOV	#L7B00, R4	; 9400	LD IX,$7B00	начало области
	MOV	#16., R1	; 9404	LD BC,$0010	
L9407:	MOVB	5(R4), R0	; 9407	LD A,(IX+$05)	<
	BIC	#177400, R0			;	|
	CMPB	R0, #128.	; 940A	CP $80		|
	BLO	L941A		; 940C	JR C,$941A	|
	CMPB	R0, 224.	; 940E	CP $E0		|
	BHIS	L941A		; 9410	JR NC,$941A	|
	MOVB	(R4), #376	; 9412	LD (IX+$00),$FE	|
	BICB	#200, 10(R4)	; 9416	RES 7,(IX+$08)	|
L941A:	ADD	R1, R4		; 941A	ADD IX,BC	|
	CMP	R4, #L8A00	; 941C	LD A,IXh	| дошли до 8A00 ?
				; 941E	CP $8A		|
	BLO	L9407		; 9420	JR C,$9407	нет => продолжаем цикл
	RETURN			; 9422	RET

L9423:
	MOV	#L8A00, R4	; 9423	LD IX,$8A00
	MOVB	#14., 12(R4)	; 9427	LD (IX+$0A),$0E	
	CLRB	6(R4)		; 942B	LD (IX+$06),$00	
	MOV	#16., R2	; 942F	LD DE,$0010	
	MOVB	#4, R1		; 9432	LD B,$04	счётчик цикла
L9434:	ADD	R2, R4		; 9434	ADD IX,DE	<
	MOV	#13., 12(R4)	; 9436	LD (IX+$0A),$0D	|
	MOV	#16., 6(R4)	; 943A	LD (IX+$06),$10	|
	SOB	R1, L9434	; 943E	DJNZ $9434	продолжаем цикл
	MOV	#L8A90, R3	; 9440	LD HL,$8A90	
	MOVB	#377, (R3)	; 9443	LD (HL),$FF	
	MOV	#L7B00, R4	; 9445	LD IX,$7B00	
	MOV	#249., R1	; 9449	LD B,$F9	счётчик цикла = 249.
L944B:	PUSH	R1		; 944B	PUSH BC		+1, сохраняем счётчик
	MOV	#L8F4A, R3	; 944C	LD HL,$8F4A	
	MOVB	6(R4), R0	; 944F	LD A,(IX+$06)	
	BIC	#177420, R0	; 9452	RES 4,A	
	CMPB	R0, #11.	; 9454	CP $0B	
	BLO	L945D		; 9456	JR C,$945D	
	MOVB	#8., 6(R4)	; 9458	LD A,$08	
				; 945A	LD (IX+$06),A	
L945D:	MOV	#22., R2	; 945D	LD DE,$0016	
	MOVB	6(R4), R0	; 9460	LD A,(IX+$06)	
	BITB	#20, R0		; 9463	BIT 4,A	
	BEQ	L9468		; 9465	JR Z,$9468	
	ADD	R2, R3		; 9467	ADD HL,DE	
L9468:	BIC	#177760, R0	; 9468	AND $0F	
	ASL	R0		; 946A	ADD A,A	
				; 946B	LD E,A	
	ADD	R0, R3		; 946C	ADD HL,DE	
	MOVB	(R3)+, R0	; 946D	LD A,(HL)	
	MOVB	R0, 5(R4)	; 946E	LD (IX+$05),A	
				; 9471	INC HL	
	MOVB	(R3), R0	; 9472	LD A,(HL)	
	MOVB	R0, 13(R4)	; 9473	LD (IX+$0B),A	
	MOV	R4, R2		; 9476	LD E,IXl	
				; 9478	LD D,IXh	
				; 947A	LD BC,$000D	
	MOV	R2, R3		; 947D	LD H,D	
				; 947E	LD L,E	
	ADD	#13., R3	; 947F	ADD HL,BC	
	MOV	#3, R1		; 9480	LD BC,$0003	
1$:	MOVB	(R3)+, (R2)+	; 9483	LDIR	
	SOB	R1, 1$
	MOVB	14(R4), R0	; 9485	LD A,(IX+$0C)	
	BIC	#177770, R0	; 9488	AND $07	
	MOVB	R0, 7(R4)	; 948A	LD (IX+$07),A	
	MOVB	10(R4), R0	; 948D	LD A,(IX+$08)	
	CMP	R0, #5		; 9490	CP $05	
	BHIS	L94A0		; 9492	JR NC,$94A0	
	MOVB	6(R4), R0	; 9494	LD A,(IX+$06)	
	BIC	#177420, R0	; 9497	RES 4,A	
	CMPB	R0, #9.		; 9499	CP $09	
	BHIS	L94A0		; 949B	JR NC,$94A0	
	TSTB	R0		; 949D	AND A	
	BNE	L94A4		; 949E	JR NZ,$94A4	
L94A0:	CLRB	10(R4)		; 94A0	LD (IX+$08),$00	
L94A4:	MOVB	(R4), R0	; 94A4	LD A,(IX+$00)	
	BIC	#177400, R0
	CMPB	R0, #376	; 94A7	CP $FE	
	BHIS	L94EE		; 94A9	JP NC,$94EE	
	MOV	R0, R2		; 94AC	LD E,A	
				; 94AD	LD D,$00	
	MOVB	2(R4), R3	; 94AF	LD L,(IX+$01)	
	BIC	#177400, R3
	SWAB	R3
	BISB	1(R4), R3	; 94B2	LD H,(IX+$02)	
	PUSH	R3		; 94B5	PUSH HL		+2
	PUSH	R2		; 94B6	PUSH DE		+3
	ADD	R2, R3		; 94B7	ADD HL,DE
	ROR	R3		; 94B8	SRL H	
				; 94BA	RR L	
	ASL	R3		; 94BC	ADD HL,HL	
	ASL	R3		; 94BD	ADD HL,HL	
	ASL	R3		; 94BE	ADD HL,HL	
	ASL	R3		; 94BF	ADD HL,HL	
	ASL	R3		; 94C0	ADD HL,HL	
	MOV	R3, R2		; 94C1	EX DE,HL	
	MOV	#<LE900+5059.>, R3	; 94C2	LD HL,$FCC3	
				; 94C5	AND A	
	SUB	R2, R3		; 94C6	SBC HL,DE	
	POP	R2		; 94C8	POP DE		+2
	MOV	(SP), R5	; 94C9	EX (SP),HL	
	MOV	R3, (SP)
	MOV	R5, R3
				; 94CA	AND A	
	SUB	R2, R3		; 94CB	SBC HL,DE	
	ROR	R3		; 94CD	SRL H	
				; 94CF	RR L	
	ASR	R3		; 94D1	SRL H	
				; 94D3	RR L	
	ASR	R3		; 94D5	SRL H	
				; 94D7	RR L	
	POP	R2		; 94D9	POP DE		+1
	ADD	R2, R3		; 94DA	ADD HL,DE	
	MOVB	R3, 3(R4)	; 94DB	LD (IX+$03),L	
	SWAB	R3
	MOVB	R3, 4(R4)	; 94DE	LD (IX+$04),H	
	MOVB	1(R4), R0	; 94E1	LD A,(IX+$01)	
	MOVB	(R4), R5	; 94E4	SUB (IX+$00)	
	BIC	#177400, R5
	SUB	R5, R0
	BIC	#177771, R0	; 94E7	AND $06	
	ASLB	R0		; 94E9	SLA A	
	MOVB	R0, 11(R4)	; 94EB	LD (IX+$09),A	
L94EE:	ADD	#16., R4	; 94EE	LD DE,$0010	к следующей записи
				; 94F1	ADD IX,DE	
	POP	R1		; 94F3	POP BC		0, восстанавливаем счётчик
	DEC	R1		; 94F4	DEC B	
	BEQ	1$
	JMP	L944B		; 94F5	JP NZ,$944B	повтор цикла
1$:	RETURN			; 94F8	RET

; Data block -- Sprite indices for ZONE digits
L94F9:	.BYTE	001,004,010,017,020,022		; 0
	.BYTE	000,006,000,017,000,023		; 1
	.BYTE	002,004,012,015,020,024		; 2
	.BYTE	002,004,013,014,021,022		; 3
	.BYTE	003,006,011,014,000,023		; 4
	.BYTE	001,005,011,016,021,022		; 5
	.BYTE	001,005,007,016,020,022		; 6
	.BYTE	002,004,000,017,000,023		; 7
	.BYTE	001,004,007,014,020,022		; 8
	.BYTE	001,004,011,014,021,022		; 9
; Data block
L9536:	.BYTE	000,000,000,000,000
	.EVEN
; Data block: big digits sprites
L953B:	.BYTE	000,000,000,000,000,000,000,000
	.BYTE	000,374,372,366,016,016,016,016
	.BYTE	000,374,370,360,000,000,000,000
	.BYTE	000,000,002,006,016,016,016,016
	.BYTE	000,077,137,157,160,160,160,160
	.BYTE	000,077,037,017,000,000,000,000
	.BYTE	000,000,100,140,160,160,160,160
	.BYTE	016,006,372,374,372,006,016,016
	.BYTE	016,006,002,000,002,006,016,016
	.BYTE	016,006,372,374,370,000,000,000
	.BYTE	000,000,370,374,372,006,016,016
	.BYTE	000,000,370,374,370,000,000,000
	.BYTE	160,140,137,077,137,140,160,160
	.BYTE	160,140,137,077,037,000,000,000
	.BYTE	000,000,037,077,137,140,160,160
	.BYTE	160,140,100,000,100,140,160,160
	.BYTE	016,016,016,016,366,372,374,000
	.BYTE	000,000,000,000,360,370,374,000
	.BYTE	160,160,160,160,157,137,077,000
	.BYTE	160,160,160,160,140,100,000,000
	.BYTE	000,000,000,000,017,037,077,000
; Data block: Адреса на экране -- позиции спрайтов для цифр ZONE
L95E3:	.WORD	136505,136506,137705,137706,141105,141106	; старшая цифра
	.WORD	136507,136510,137707,137710,141107,141110	; младшая цифра

; Show the screen
L95EF:
;NOTE: 95EF..95FB code clears attributes -- removed
	MOV	#<LD900+5>, R3	; 95FC	LD HL,$D905	
	MOV	R3, R2		; 95FF	LD D,H	
				; 9600	LD E,L	
	MOV	#L7100, R4	; 9601	LD IX,$7100	
	MOV	#8., R1		; 9605	LD B,$08	
L9607:	PUSH	R1		; 9607	PUSH BC	
	MOVB	10(R4), R0	; 9608	LD A,(IX+$08)	
	MOVB	R0, (R2)+	; 960B	LD (DE),A	
				; 960C	INC DE	
	MOVB	(R4)+, R0	; 960D	LD A,(IX+$00)	
	MOVB	R0, (R2)+	; 9610	LD (DE),A	
				; 9611	INC DE	
	MOV	#30., R1	; 9612	LD BC,$001E	
1$:	MOVB	(R3)+, (R2)+	; 9615	LDIR	
	SOB	R1, 1$
				; 9617	INC IX	
	INC	R3		; 9619	INC HL	
	INC	R3		; 961A	INC HL	
	POP	R1		; 961B	POP BC	
	SOB	R1, L9607	; 961C	DJNZ $9607	
	SUB	#256., R3	; 961E	DEC H	
	MOV	#4352., R1	; 961F	LD BC,$1100	
2$:	MOVB	(R3)+, (R2)+	; 9622	LDIR	
	SOB	R1, 2$
	MOV	#<LD900+283.>, R3	; 9624	LD HL,$DA1B	
	CALL	L9633		; 9627	CALL $9633	Draw zone border
	MOV	#<LDF00+1541.>, R3	; 962A	LD HL,$E505	
	CALL	L9633		; 962D	CALL $9633	Draw zone border
	JMP	L965D		; 9630	JP $965D	

; Routine: Draw zone border
L9633:	MOV	#5, R5		; 9633	LD C,$05	
	MOV	#32., R2	; 9635	LD DE,$0020	
L9638:	MOV	#<L7100+16.>, R4	; 9638	LD IX,$7110	
	MOV	#4, R1		; 963C	LD B,$04	
L963E:	MOVB	(R4)+, R0	; 963E	LD A,(IX+$00)	
	MOVB	R0, (R3)	; 9641	LD (HL),A	
				; 9642	INC IX	
	ADD	R2, R3		; 9644	ADD HL,DE	
	SOB	R1, L963E	; 9645	DJNZ $963E	
	INC	R3		; 9647	INC HL	
	MOV	#4, R1		; 9648	LD B,$04	
L964A:	MOVB	(R4)+, R0	; 964A	LD A,(IX+$00)	
	MOVB	R0, (R3)	; 964D	LD (HL),A	
				; 964E	INC IX	
	ADD	R2, R3		; 9650	ADD HL,DE	
	SOB	R1, L964A	; 9651	DJNZ $964A	
	INC	R3		; 9653	INC HL	
	SOB	R5, L9638	; 9654	DEC C	
				; 9655	JR NZ,$9638	
	RETURN			; 9657	RET	

L9658:	.BYTE	12.	; Current column height, in char-lines
	.BYTE	0	; Filler
L9659:	.WORD	0
L965B:	.WORD	0

L965D:	MOVB	#12., L9658	; 965D	LD A,$0C	
				; 965F	LD ($9658),A	initial column height
	MOVB	L8F00, R0	; 9662	LD A,($8F00)	
	MOV	R0, R3		; 9665	LD H,$00	
				; 9667	LD L,A	
	ASL	R3		; 9668	ADD HL,HL	
	ASL	R3		; 9669	ADD HL,HL	
	ASL	R3		; 966A	ADD HL,HL	
	ASL	R3		; 966B	ADD HL,HL	
	MOV	R3, R2		; 966C	LD D,H	
				; 966D	LD E,L	
	ASL	R3		; 966E	ADD HL,HL	
	ADD	R2, R3		; 966F	ADD HL,DE	A * 48. -> HL
	ADD	#L6AD0, R3	; 9670	LD DE,$6AD0	
				; 9673	ADD HL,DE	
	MOV	#<LD900+5>, R4	; 9674	LD IX,$D905	
	MOV	#LFD00, R2	; 9678	LD DE,$FD00	
	MOV	#12., R1	; 967B	LD C,$0C	
L967D:	MOVB	(R3), R0	; 967D	LD A,(HL)	Начало цикла рисования верхних столбцов фона
	BIC	#177400, R0
	MOV	R3, L9659	; 967E	LD ($9659),HL	
	PUSH	R4		; 9681	PUSH IX	
	PUSH	R2		; 9683	PUSH DE	
	PUSH	R2		; 9684	PUSH DE	
	MOV	R0, R3		; 9685	LD L,A	
				; 9686	LD H,$00	
	ASL	R3		; 9688	ADD HL,HL	
	ASL	R3		; 9689	ADD HL,HL	
	MOV	R3, R2		; 968A	LD D,H	
				; 968B	LD E,L	
	ASL	R3		; 968C	ADD HL,HL	
	ADD	R2, R3		; 968D	ADD HL,DE	A * 12. -> HL
				; 968E	LD DE,$650C	
	ADD	#L650C, R3	; 9691	ADD HL,DE	
	MOV	L9658, R0	; 9692	LD A,($9658)	
	MOV	R0, R5		; 9695	LD B,A		height count
	MOV	R0, R2		; 9696	LD E,A	
				; 9697	LD D,$00	
				; 9699	AND A	
	SUB	R2, R3		; 969A	SBC HL,DE	
L969C:	MOVB	(R3), R2	; 969C	LD E,(HL)	
	BIC	#177400, R2
	ADD	#L7900, R2	; 969D	LD D,$79	
	MOV	R3, L965B	; 969F	LD ($965B),HL	
	MOVB	(R2), R0	; 96A2	LD A,(DE)	
	POP	R3		; 96A3	POP HL	
	MOVB	R0, (R3)	; 96A4	LD (HL),A	
				; 96A5	LD DE,$0020	
	ADD	#32., R3	; 96A8	ADD HL,DE	
	PUSH	R3		; 96A9	PUSH HL	
	MOV	L965B, R3	; 96AA	LD HL,($965B)	
	MOVB	(R3), R0	; 96AD	LD A,(HL)	
	BIC	#177400, R0
	MOV	R0, R3		; 96AE	LD L,A	
				; 96AF	LD H,$00	
	ASL	R3		; 96B1	ADD HL,HL	
	ASL	R3		; 96B2	ADD HL,HL	
	ASL	R3		; 96B3	ADD HL,HL	
	ADD	#L7100, R3	; 96B4	LD DE,$7100	
				; 96B7	ADD HL,DE	
	MOV	#8., R0		; 96B8	LD A,$08	
	MOV	#32., R2	; 96BA	LD DE,$0020	line length
L96BD:				; 96BD	EX AF,AF'	
	MOVB	(R3)+, (R4)	; 96BE	LD A,(HL)	
				; 96BF	LD (IX+$00),A	
				; 96C2	INC HL	
	ADD	R2, R4		; 96C3	ADD IX,DE	next line
				; 96C5	EX AF,AF'	
	SOB	R0, L96BD	; 96C6	DEC A	
				; 96C7	JR NZ,$96BD	
	MOV	L965B, R3	; 96C9	LD HL,($965B)	
	INC	R3		; 96CC	INC HL	
	SOB	R5, L969C	; 96CD	DJNZ $969C	
	POP	R2		; 96CF	POP DE	
	POP	R2		; 96D0	POP DE	
	POP	R4		; 96D1	POP IX	
	INC	R2		; 96D3	INC DE	
	INC	R4		; 96D4	INC IX	
	MOV	L9659, R3	; 96D6	LD HL,($9659)	
	INC	R3		; 96D9	INC HL	
				; 96DA	LD A,IXl	
	BITB	#1, R4		; 96DC	BIT 0,A	
	BEQ	L967D		; 96DE	JR Z,$967D	
	DECB	L9658		; 96E0	LD A,($9658)	decrease column height
				; 96E3	DEC A	
				; 96E4	LD ($9658),A	
	DEC	R1		; 96E7	DEC C	
	BNE	L967D		; 96E8	JR NZ,$967D
; Цикл рисования нижних столбцов фона
	MOVB	#1, L9658	; 96EA	LD A,$01	initial column height
				; 96EC	LD ($9658),A	
	MOV	#<LE900+269.>, R4	; 96EF	LD IX,$EA0D	
	MOV	#<LFD00+552.>, R2	; 96F3	LD DE,$FF28	
	MOV	#12., R1	; 96F6	LD C,$0C	
L96F8:	MOVB	(R3), R0	; 96F8	LD A,(HL)
	BIC	#177400, R0
	MOV	R3, L9659	; 96F9	LD ($9659),HL	
	PUSH	R4		; 96FC	PUSH IX	
	PUSH	R2		; 96FE	PUSH DE	
	PUSH	R2		; 96FF	PUSH DE	
	MOV	R0, R3		; 9700	LD H,$00	
				; 9702	LD L,A	
	ASL	R3		; 9703	ADD HL,HL	
	ASL	R3		; 9704	ADD HL,HL	
	MOV	R3, R2		; 9705	LD D,H	
				; 9706	LD E,L	
	ASL	R3		; 9707	ADD HL,HL	
	ADD	R2, R3		; 9708	ADD HL,DE	
	ADD	#L6500, R3	; 9709	LD DE,$6500	
				; 970C	ADD HL,DE	
	MOV	L9658, R0	; 970D	LD A,($9658)	
	MOV	R0, R5		; 9710	LD B,A	
L9711:	MOVB	(R3), R2	; 9711	LD E,(HL)	
	BIC	#177400, R2
	ADD	#L7900, R2	; 9712	LD D,$79	
	MOV	R3, L965B	; 9714	LD ($965B),HL	
	MOVB	(R2), R0	; 9717	LD A,(DE)	
	POP	R3		; 9718	POP HL	
	MOVB	R0, (R3)	; 9719	LD (HL),A	
				; 971A	LD DE,$0020	
	ADD	#32., R3	; 971D	ADD HL,DE	
	PUSH	R3		; 971E	PUSH HL	
	MOV	L965B, R3	; 971F	LD HL,($965B)	
	MOVB	(R3), R0	; 9722	LD A,(HL)	
	BIC	#177400, R0
	MOV	R0, R3		; 9723	LD L,A	
				; 9724	LD H,$00	
	ASL	R3		; 9726	ADD HL,HL	
	ASL	R3		; 9727	ADD HL,HL	
	ASL	R3		; 9728	ADD HL,HL	
	ADD	#L7100, R3	; 9729	LD DE,$7100	
				; 972C	ADD HL,DE	
	MOV	#8., R0		; 972D	LD A,$08	
	MOV	#32., R2	; 972F	LD DE,$0020	
L9732:				; 9732	EX AF,AF'	
	MOVB	(R3)+, (R4)	; 9733	LD A,(HL)	
				; 9734	LD (IX+$00),A	
				; 9737	INC HL	
	ADD	R2, R4		; 9738	ADD IX,DE	
				; 973A	EX AF,AF'	
	SOB	R0, L9732	; 973B	DEC A	
				; 973C	JR NZ,$9732	
	MOV	L965B, R3	; 973E	LD HL,($965B)	
	INC	R3		; 9741	INC HL	
	SOB	R5, L9711	; 9742	DJNZ $9711	
	POP	R2		; 9744	POP DE	
	POP	R2		; 9745	POP DE	
	POP	R4		; 9746	POP IX	
	INC	R2		; 9748	INC DE	
	INC	R4		; 9749	INC IX	
	MOV	L9659, R3	; 974B	LD HL,($9659)	
	INC	R3		; 974E	INC HL	
	BITB	#1, R4		; 974F	LD A,IXl	
				; 9751	BIT 0,A	
	BEQ	L96F8		; 9753	JR Z,$96F8	
	SUB	#256., R4	; 9755	DEC IXh	
	PUSH	R3		; 9757	PUSH HL	
				; 9758	LD HL,$FFE0	
	SUB	#32., R2	; 975B	ADD HL,DE	
				; 975C	EX DE,HL	
				; 975D	LD HL,$9658	
	INCB	L9658		; 9760	INC (HL)	
	POP	R3		; 9761	POP HL	
	DEC	R1		; 9762	DEC C	
	BNE	L96F8		; 9763	JR NZ,$96F8	
	MOVB	L8F1C, R0	; 9765	LD A,($8F1C)	
	BIC	#177400, R0
	CMPB	R0, #31.	; 9768	CP $1F	
	BLO	L976D
	CALL	LA8D6		; 976A	CALL NC,$A8D6	
;
L976D:	MOV	#<LD900+5>, R3	; 976D	LD HL,$D905	
	MOV	#<LD900+4581.>, R2
	MOV	#377, R0	; 9770	LD DE,$D906	
	MOV	#32., R1	; 9773	LD (HL),$FF	
1$:	MOVB	R0, (R3)+	; 9775	LD BC,$001F	
	MOVB	R0, (R2)+
				; 9778	LDIR		Make top line
				; 977A	LD HL,$D905	
		 		; 977D	LD DE,$EAE5	
				; 9780	LD BC,$0020	
	SOB	R1, 1$		; 9783	LDIR		Make bottom line
; Линейки слева и справа
	MOV	#<LD900+37.>, R3	; 9785	LD HL,$D925	
	MOV	#31., R2	; 9788	LD DE,$001F	
	MOV	#142., R1	; 978B	LD B,$8E	lines	
L978D:	BISB	#1, (R3)	; 978D	LD A,(HL)	
				; 978E	OR $80	        Left border
				; 9790	LD (HL),A	
	ADD	R2, R3		; 9791	ADD HL,DE	
	BISB	#200, (R3)+	; 9792	LD A,(HL)	
				; 9793	OR $01		Right border
				; 9795	LD (HL),A	
				; 9796	INC HL	
	SOB	R1, L978D	; 9797	DJNZ $978D	
; NOTE: 9799..97A4 code fills attributes, removed
;
; Вывод экрана D905 на реальный экран
	MOV	#176640, R4		; Адрес порта адреса косвенной записи УКНЦ
	MOV	#176642, R5		; Адрес порта данных косвенной записи УКНЦ
	MOV	#<LD900+5>, R3	; 97A6	LD HL,$D905	
	MOV	#105504, R2	; 97A9	LD DE,$4000	Screen address
	MOV	#144., R0		; Количество копируемых строк
10$:	PUSH	R0
	MOV	#32., R1		; Байт в строке
20$:	MOVB	(R3)+, R0
	BIC    	#177400, R0
	MOV	R2, (R4)		; Устанавливаем адрес
	MOV	R0, (R5)		; Пишем в экран	
	INC	R2
	SOB	R1, 20$
	ADD	#<80.-32.>, R2		; Следующая строка
	POP	R0
	SOB	R0, 10$
; Копирование подготовленного теневого экрана на второй теневой экран
	MOV	#<LD900+1005>, R3	; 97DF	LD HL,$DB05	
	MOV	#LEB00, R2		; 97E2	LD DE,$EB00	
	MOV	#4096., R1		; 97E5	LD BC,$1000	
1$:	MOVB	(R3)+, (R2)+		; 97E8	LDIR		Копирование основной части, 4096. байт, 128. строк
	SOB	R1, 1$
	MOV	#15., R5		; 97EA	LD C,$0F	
	MOV	#2., R4			; 97EC	LD B,$02	Осталось скопировать 2x8 строк
	MOV	#<LD900+22.>, R3	; 97EE	LD HL,$D916	
	MOV	#<LE900+17.>, R2	; 97F1	LD DE,$E911	
L97F4:	MOV	#8., R0			; 97F4	LD A,$08	
L97F6:	PUSH	R1			; 97F6	PUSH BC	
	MOV	R5, R1			; 97F7	LD B,$00	
	PUSH	R3			; 97F9	PUSH HL	
	PUSH	R2			; 97FA	PUSH DE	
1$:	MOVB	(R3)+, (R2)+		; 97FB	LDIR	
	SOB	R1, 1$
	POP	R2			; 97FD	POP DE	
	POP	R3			; 97FE	POP HL	
				; 97FF	LD BC,$0020	
	ADD	#40, R3		; 9802	ADD HL,BC	
				; 9803	EX DE,HL	
	ADD	#40, R2		; 9804	ADD HL,BC	
				; 9805	EX DE,HL	
	POP	R1		; 9806	POP BC	
				; 9807	DEC A	
	SOB	R0, L97F6	; 9808	JR NZ,$97F6	
	DEC	R3		; 980A	DEC L	
	DEC	R3		; 980B	DEC L	
	DEC	R2		; 980C	DEC E	
	DEC	R2		; 980D	DEC E	
	INC	R5		; 980E	INC C	
	INC	R5		; 980F	INC C	
	SOB	R4, L97F4	; 9810	DJNZ $97F4
;
; NOTE: 9812..981D code fills attributes, removed
;
	JMP	LA546 		; 981F	JP $A546

; Routine
L9822:
	MOV	#L8D52, R3	; 9822	LD HL,$8D52	
	MOVB	(R3), R0	; 9825	LD A,(HL)	
				; 9826	AND A	
	BEQ	L9859		; 9827	JP Z,$9859	
L982A:	INC	R3		; 982A	INC L	
	MOVB	(R3)+, R2	; 982B	LD E,(HL)	
	BIC	#177400, R2	; 982C	INC L	
	SWAB	R2
	BISB	(R3)+, R2	; 982D	LD D,(HL)	
	SWAB	R2      	; 982E	INC L	
	PUSH	R3		; 982F	PUSH HL	
	MOV	R2, R5		; 9830	EX DE,HL	
	INC	R5		; 9831	INC L	
	INC	R5		; 9832	INC L	
	INC	R5		; 9833	INC L	
	MOVB	(R5)+, R2	; 9834	LD E,(HL)	
	BIC	#177400, R2	; 9835	INC L	
	SWAB	R2
	BISB	(R5), R2	; 9836	LD D,(HL)	
	SWAB	R2
	MOV	L8F03, R3	; 9837	LD HL,($8F03)	
	ADD	R2, R3		; 983A	ADD HL,DE	
	MOV	R3, R2		; 983B	LD E,L	
				; 983C	LD D,H	
	MOV	#<LE900+3405>, R1	; 983D	LD BC,$F005	
	ADD	R1, R3		; 9840	ADD HL,BC	
	MOV	#24., R0	; 9841	LD A,$18	
L9843:	MOV	#3, R1		; 9843	LD BC,$0003	
1$:	MOVB	(R3)+, (R2)+	; 9846	LDIR	
	SOB	R1, 1$
	MOV	#177735, R1	; 9848	LD BC,$FFDD	-23.
				; 984B	EX DE,HL	
	ADD	R1, R2		; 984C	ADD HL,BC	
				; 984D	EX DE,HL	
	ADD	R1, R3		; 984E	ADD HL,BC	
				; 984F	DEC A	
	SOB	R0, L9843	; 9850	JP NZ,$9843	
	POP	R3		; 9853	POP HL	
	MOVB	(R3), R0	; 9854	LD A,(HL)	
				; 9855	AND A	
	BNE	L982A		; 9856	JP NZ,$982A	
L9859:	RETURN			; 9859	RET	

; Routine
; Used by the routines at 90F2, A34D, A8C5.
L985A:	
	MOV	L8F01, R4	; 985A	LD IX,($8F01)	
	MOV	#L8D52, R3	; 985E	LD HL,$8D52	
	MOV	R3, L8F0B	; 9861	LD ($8F0B),HL	
	CLRB	(R3)		; 9864	LD (HL),$00	
L9866:	MOVB	(R4), R0	; 9866	LD A,(IX+$00)	
	BIC	#177400, R0
	CMPB	R0, #376	; 9869	CP $FE	
	BEQ	L98D4		; 986B	JP Z,$98D4	
	BHIS	L98DC		; 986E	JP NC,$98DC	
	MOV	R0, R1		; 9871	LD B,A	
	MOVB	6(R4), R0	; 9872	LD A,(IX+$06)	
	BIC	#177400, R0
	CMPB	R0, #22.	; 9875	CP $16	
	BEQ	L98D4		; 9877	JP Z,$98D4	
	CMPB	R0, #25.	; 987A	CP $19	
	BEQ	L98D4		; 987C	JP Z,$98D4	
	MOV	L8F09, R2	; 987F	LD DE,($8F09)	
	MOVB	2(R4), R3	; 9883	LD L,(IX+$01)	
	BIC	#177400, R3
	SWAB	R3
	BISB	1(R4), R3	; 9886	LD H,(IX+$02)	
				; 9889	AND A	
	SUB	R2, R3		; 988A	SBC HL,DE	
	BIT	#177400, R3	; 988C	LD A,H	
				; 988D	AND A	
	BNE	L98D4		; 988E	JP NZ,$98D4	
	MOV	R3, R0		; 9891	LD A,L	
	BIC	#177400, R0
	ASR	R0		; 9892	SRL A	
	ASR	R1		; 9894	SRL B	
	ADD	R1, R0		; 9896	ADD A,B	
	INC	R0		; 9897	INC A	
	MOV	#L8D52, R3	; 9898	LD HL,$8D52	
L989B:	CMPB	R0, (R3)	; 989B	CP (HL)	
	BHIS	L98A4		; 989C	JR NC,$98A4	
	INC	R3		; 989E	INC L	
	INC	R3		; 989F	INC L	
	INC	R3		; 98A0	INC L	
	BR	L989B		; 98A1	JP $989B	
L98A4:	MOV	R0, R5		; 98A4	EX AF,AF'	save A
	MOV	L8F0B, R2	; 98A5	LD DE,($8F0B)	
				; 98A9	XOR A	
	TSTB	(R3)		; 98AA	CP (HL)	
	BNE	L98B8		; 98AB	JR NZ,$98B8	
	INC	R2		; 98AD	INC E	
	INC	R2		; 98AE	INC E	
	INC	R2		; 98AF	INC E	
	MOV	R2, L8F0B	; 98B0	LD ($8F0B),DE	
	MOVB	R0, (R2)	; 98B4	LD (DE),A	
	BR	L98CA		; 98B5	JP $98CA	
L98B8:	PUSH	R3		; 98B8	PUSH HL	
	MOV	R2, R0		; 98B9	LD A,E	
	SUB	R3, R0		; 98BA	SUB L	
	MOV	R0, R1		; 98BB	LD C,A	
				; 98BC	LD B,$00	
	INC	R1		; 98BE	INC C	
	MOV	R2, R3		; 98BF	LD L,E	
	INC	R2		; 98C0	INC E	
	INC	R2		; 98C1	INC E	
	INC	R2		; 98C2	INC E	
	MOV	R2, L8F0B	; 98C3	LD ($8F0B),DE	
1$:	MOVB	-(R3), -(R2)	; 98C7	LDDR	
	SOB	R1, 1$
	POP	R3		; 98C9	POP HL	
L98CA:	MOV	R5, R0		; 98CA	EX AF,AF'	restore A
	MOVB	R0, (R3)	; 98CB	LD (HL),A	
	INC	R3		; 98CC	INC L	
	MOV	R4, R2		; 98CD	LD E,IXl	
				; 98CF	LD D,IXh	
	MOVB	R2, (R3)+	; 98D1	LD (HL),E	
	SWAB	R2		; 98D2	INC L	
	MOVB	R2, (R3)	; 98D3	LD (HL),D	
L98D4:				; 98D4	LD DE,$0010	
	ADD	#16., R4	; 98D7	ADD IX,DE	
	BR	L9866		; 98D9	JP $9866	
L98DC:	MOV	#L8D52, R3	; 98DC	LD HL,$8D52	
	MOVB	(R3), R0	; 98DF	LD A,(HL)	
	BNE	L98E2		; 98E0	AND A	
	RETURN			; 98E1	RET Z	
L98E2:
	INC	R3		; 98E2	INC L	
	MOVB	(R3)+, R4	; 98E3	LD A,(HL)	
	BIC	#177400, R4	; 98E4	LD IXl,A	
	SWAB	R4		; 98E6	INC L	
	BISB	(R3)+, R4	; 98E7	LD A,(HL)	
	SWAB	R4		; 98E8	LD IXh,A	
				; 98EA	INC L	
	PUSH	R3		; 98EB	PUSH HL	
	MOVB	12(R4), R3	; 98EC	LD H,$8F	
	BIC	#177400, R3
	ADD	#L8F00, R3	; 98EE	LD L,(IX+$0A)	WARN: обращение по индексу к области переменных 8F00
	MOVB	(R3), R0	; 98F1	LD A,(HL)
	BIC	#177400, R0	
	MOVB	5(R4), R5	; 98F2	ADD A,(IX+$05)	
	BIC	#177400, R5
	ADD	R5, R0
	MOV	#L7A00, R3	; 98F5	LD L,A	
	ADD	R0, R3		; 98F6	LD H,$7A	
	MOV	(R3)+, R2	; 98F8	LD E,(HL)	
				; 98F9	INC HL	
				; 98FA	LD D,(HL)	DE = адрес спрайта
	SUB	#<134360-LB8F0>, R2			;HACK: Уточняем реальный адрес спрайта
	MOVB	11(R4), R0	; 98FB	LD A,(IX+$09)	
	BIC	#177763, R0
	ADD	R0, R0		; 98FE	ADD A,A	
	MOV	R0, R1		; 98FF	LD C,A	
				; 9900	LD B,$00	
	MOV	#L9915, R3	; 9902	LD HL,$9915	jump base address	
	ADD	R1, R3		; 9905	ADD HL,BC	
	MOVB	4(R4), R1	; 9906	LD C,(IX+$03)	
	BIC	#177400, R1
	SWAB	R1
	BISB	3(R4), R1	; 9909	LD B,(IX+$04)	
	MOV	R3, R5		; 990C	PUSH HL		save HL
	MOV	L8F03, R3	; 990D	LD HL,($8F03)	
	ADD	R1, R3		; 9910	ADD HL,BC	
	MOV	R3, R1		; 9911	LD C,L	
				; 9912	LD B,H		BC = адрес куда рисовать спрайт
	PUSH	R3		; 9913	EX (SP),HL	restore HL and set value on stack
	MOV	R5, R3
	JMP	(R3)		; 9914	JP (HL)	
L9915:	CALL	L99D1		; 9915	CALL $99D1	Draw sprite with shift by 4px
	BR	L9980		; 9918	JP $9980	
	NOP			; 991B	NOP	
				; 991C	NOP	
	CALL	L9A26		; 991D	CALL $9A26	Draw sprite with shift by 2px
	BR	L9980		; 9920	JP $9980	
	NOP			; 9923	NOP	
				; 9924	NOP	
	CALL	L9A70		; 9925	CALL $9A70	Draw sprite with no shift
	BR	L9980		; 9928	JP $9980	
	NOP			; 992B	NOP	
				; 992C	NOP	
	CALL	L9933		; 992D	CALL $9933	Draw sprite with shift by -2px
;	BR	L9980		; 9930	JP $9980

;NOTE: Процедура 9933 перенесена ниже, ближе к остальным процедурам отрисовки спрайтов

; Сюда приходим из процедуры 985A после отрисовки спрайта
L9980:	POP	R3		; 9980	POP HL		какой был адрес "куда рисовать"
				; 9981	LD A,H	
	CMP	R3, #LE900	; 9982	CP $E9	        рисовали во второй теневой экран?
	BLO	L99A8		; 9984	JP C,$99A8	нет => пропускаем
				; 9987	EX DE,HL	
	SUB	#LE900, R3	; 9988	SUB $E9	        получаем смещение от начала теневого экрана
	MOV	R3, R0
				; 998A	ADD A,A	
	BIC	#377, R3	; 998B	ADD A,A		оставляем старший байт
	ASR	R3		; 998C	ADD A,A	
	ASR	R3		; 998D	LD L,A	
	ASR	R3		; 998E	LD H,$00	
				; 9990	ADD HL,HL	
				; 9991	ADD HL,HL	
				; 9992	LD A,E	
	BIC	#177740, R0	; 9993	AND $1F		смещение в рамках одной строки -- от 0 до 31.
				; 9995	LD E,A	
	BIS	R0, R3		; 9996	LD D,$FD	добавляем смещение в рамках строки
	ADD	#LFD00, R3	; 9998	ADD HL,DE	адрес начала области флажков отрисовки
				; 9999	LD DE,$FFDE	
	MOV	#2, R0		; 999C	LD A,$02	маркер отрисовки
	MOV	#4, R1		; 999E	LD B,$04	спрайт занимает 3 или 4 знако-строки
L99A0:	MOVB	R0, (R3)+	; 99A0	LD (HL),A	отмечаем к отрисовке 3 знакоместа
				; 99A1	INC HL	
	MOVB	R0, (R3)+	; 99A2	LD (HL),A	
				; 99A3	INC HL	
	MOVB	R0, (R3)	; 99A4	LD (HL),A	
	SUB	#34., R3	; 99A5	ADD HL,DE	на строку выше
	SOB	R1, L99A0	; 99A6	DJNZ $99A0      повторяем цикл
L99A8:	
	POP	R3		; 99A8	POP HL
	MOVB	(R3), R0	; 99A9	LD A,(HL)	
				; 99AA	AND A	
	BNE	L98E2		; 99AB	JP NZ,$98E2	продолжение большого цикла
;
	MOV	#<LFD00+440>, R2	; 99AE	LD DE,$FE20	
	MOV	#<LFD00+400>, R3	; 99B1	LD HL,$FE40	
	MOV	#2, R0		; 99B4	LD A,$02	маркер отрисовки
				; 99B6	EX AF,AF'	
	MOV	#7, R5		; 99B7	LD A,$07	счётчик цикла
	MOV	#31., R1	; 99B9	LD BC,$001F	длина строки минус 1
L99BC:				; 99BC	EX AF,AF'	
	CMPB	R0, (R3)	; 99BD	CP (HL)	
	BNE	L99C1		; 99BE	JR NZ,$99C1	
	MOVB	R0, (R2)	; 99C0	LD (DE),A	
L99C1:	INC	R3		; 99C1	INC L	
	INC	R2		; 99C2	INC E	
	CMPB	R0, (R3)	; 99C3	CP (HL)	
	BNE	L99C7		; 99C4	JR NZ,$99C7	
	MOVB	R0, (R2)	; 99C6	LD (DE),A	
L99C7:	ADD	R1, R3		; 99C7	ADD HL,BC	к следующей строке
				; 99C8	EX DE,HL	
	ADD	R1, R2		; 99C9	ADD HL,BC	к следующей строке
				; 99CA	EX DE,HL	
				; 99CB	EX AF,AF'	
				; 99CC	DEC A	
	SOB	R5, L99BC	; 99CD	JP NZ,$99BC	продолжение цикла по строкам
	RETURN 			; 99D0	RET		

; Routine: Draw sprite with shift by -2px
; BC = адрес куда рисовать
; DE = адрес спрайта
L9933:	MOV	R1, R3		; 9933	LD L,C	
				; 9934	LD H,B	
	MOV	#24., R0	; 9935	LD A,$18	Sprite height = 24.	
L9937:	PUSH	R0		; 9937	EX AF,AF'	
				; 9938	EX DE,HL	
	MOV	(R2)+, R0	; 9939	LD A,(HL)	
				; 993A	INC HL	
	MOVB	(R2)+, R1	; 993B	LD B,(HL)	
				; 993C	INC HL	
				; 993D	LD C,(HL)	
				; 993E	INC HL	
	ASL	R0		; 993F	SRA A	
	ROLB	R1		; 9941	RR B	
				; 9943	RR C	
	ASL	R0		; 9945	SRA A	
	ROLB	R1		; 9947	RR B	
				; 9949	RR C	
				; 994B	EX DE,HL	
	BICB	R0, (R3)+	; 994C	AND (HL)	
				; 994D	LD (HL),A	
	SWAB	R0		; 994E	LD A,B	
				; 994F	INC HL	
	BICB	R0, (R3)+	; 9950	AND (HL)	
				; 9951	LD (HL),A	
				; 9952	LD A,C	
				; 9953	INC HL	
	BICB	R1, (R3)	; 9954	AND (HL)	
				; 9955	LD (HL),A	
	DEC	R3		; 9956	DEC HL	
	DEC	R3		; 9957	DEC HL	
				; 9958	EX DE,HL	
	MOVB	(R2)+, R0	; 9959	LD A,(HL)	
				; 995A	INC HL	
	MOV	(R2)+, R1	; 995B	LD B,(HL)	
				; 995C	INC HL	
				; 995D	LD C,(HL)	
				; 995E	INC HL	
	ASLB	R0		; 995F	SRL A	
	ROL	R1		; 9961	RR B	
				; 9963	RR C	
	ASLB	R0		; 9965	SRL A	
	ROL	R1		; 9967	RR B	
				; 9969	RR C	
				; 996B	EX DE,HL	
	BISB	R0, (R3)+	; 996C	OR (HL)	
				; 996D	LD (HL),A	
				; 996E	LD A,B	
				; 996F	INC HL	
	BISB	R1, (R3)+	; 9970	OR (HL)	
				; 9971	LD (HL),A	
	SWAB	R1		; 9972	LD A,C	
				; 9973	INC HL	
	BISB	R1, (R3)	; 9974	OR (HL)	
				; 9975	LD (HL),A	
	SUB	#34., R3	; 9976	LD BC,$FFDE	
				; 9979	ADD HL,BC	
	POP	R0		; 997A	EX AF,AF'	
	SOB	R0, L9937	; 997B	DEC A	
				; 997C	JP NZ,$9937	
	RETURN			; 997F	RET

; Routine: Draw sprite with shift by 4px
L99D1:
	MOV	R1, R3		; 99D1	LD H,B	
				; 99D2	LD L,C	
	MOV	#24., R0	; 99D3	LD A,$18	Sprite height = 24.
L99D5:	PUSH	R0		; 99D5	EX AF,AF'	store counter A
				; 99D6	EX DE,HL	
	MOV	(R2)+, R0	; 99D7	LD A,(HL)	Get mask byte 0
				; 99D8	INC HL	
				; 99D9	LD B,(HL)	Get mask byte 1
				; 99DA	INC HL	
	MOVB	(R2)+, R1	; 99DB	LD C,(HL)	Get mask byte 2
				; 99DC	INC HL	
				; 99DD	SCF	
	ASRB	R1		; 99DE	RL C		Shift by 1
	ROR	R0		; 99E0	RL B
				; 99E2	RLA
	ASRB	R1		; 99E3	RL C		Shift by 2
	ROR	R0		; 99E5	RL B
				; 99E7	RLA
	ASRB	R1		; 99E8	RL C		Shift by 3
	ROR	R0		; 99EA	RL B
				; 99EC	RLA
	ASRB	R1		; 99ED	RL C		Shift by 4
	ROR	R0		; 99EF	RL B
				; 99F1	RLA
				; 99F2	EX DE,HL	
	BICB	R0, (R3)+	; 99F3	AND (HL)	
				; 99F4	LD (HL),A	
	SWAB	R0		; 99F5	LD A,B	
				; 99F6	INC HL	
	BICB	R0, (R3)	; 99F7	AND (HL)	
				; 99F8	LD (HL),A	
	DEC	R3		; 99F9	DEC HL	
				; 99FA	EX DE,HL	
	MOVB	(R2)+, R0	; 99FB	LD A,(HL)	
				; 99FC	INC HL	
	MOV	(R2)+, R1	; 99FD	LD B,(HL)	
				; 99FE	INC HL	
				; 99FF	LD C,(HL)	
				; 9A00	INC HL	
	ASR	R1		; 9A01	SLA C		Shift by 1
	RORB	R0		; 9A03	RL B
				; 9A05	RLA
	ASR	R1		; 9A06	SLA C		Shift by 2
	RORB	R0		; 9A08	RL B
				; 9A0A	RLA
	ASR	R1		; 9A0B	SLA C		Shift by 3
	RORB	R0		; 9A0D	RL B
				; 9A0F	RLA
	ASR	R1		; 9A10	SLA C		Shift by 4
	RORB	R0		; 9A12	RL B
				; 9A14	RLA
				; 9A15	EX DE,HL	
	BISB	R0, (R3)+	; 9A16	OR (HL)	
				; 9A17	LD (HL),A	
				; 9A18	LD A,B	
				; 9A19	INC HL	
	BISB	R1, (R3)	; 9A1A	OR (HL)	
				; 9A1B	LD (HL),A	
	SUB	#33., R3	; 9A1C	LD BC,$FFDF	
				; 9A1F	ADD HL,BC	
	POP	R0		; 9A20	EX AF,AF'	restore counter A
	SOB	R0, L99D5	; 9A21	DEC A	
				; 9A22	JP NZ,$99D5	loop by sprite height
	RETURN			; 9A25	RET	

; Routine: Draw sprite with shift by 2px
L9A26:
	MOV	R1, R3		; 9A26	LD H,B	
				; 9A27	LD L,C	
	MOV	#24., R0	; 9A28	LD A,$18	счётчик цикла = 24.
L9A2A:	PUSH	R0		; 9A2A	EX AF,AF'	
				; 9A2B	EX DE,HL	
	MOV	(R2)+, R0	; 9A2C	LD A,(HL)	
				; 9A2D	INC HL	
				; 9A2E	LD B,(HL)	
				; 9A2F	INC HL	
	MOVB	(R2)+, R1	; 9A30	LD C,(HL)	
				; 9A31	INC HL	
				; 9A32	SCF	
	ASRB	R1		; 9A33	RL C	
	ROR	R0		; 9A35	RL B	
				; 9A37	RLA	
	ASRB	R1		; 9A38	RL C	
	ROR	R0		; 9A3A	RL B	
				; 9A3C	RLA	
				; 9A3D	EX DE,HL	
	BICB	R0, (R3)+	; 9A3E	AND (HL)	
				; 9A3F	LD (HL),A	
	SWAB	R0		; 9A40	LD A,B	
				; 9A41	INC HL	
	BICB	R0, (R3)+	; 9A42	AND (HL)	
				; 9A43	LD (HL),A	
				; 9A44	LD A,C	
				; 9A45	INC HL	
	BICB	R1, (R3)	; 9A46	AND (HL)	
				; 9A47	LD (HL),A	
	DEC	R3		; 9A48	DEC HL	
	DEC	R3		; 9A49	DEC HL	
				; 9A4A	EX DE,HL	
	MOVB	(R2)+, R0	; 9A4B	LD A,(HL)	
				; 9A4C	INC HL	
	MOV	(R2)+, R1	; 9A4D	LD B,(HL)	
				; 9A4E	INC HL	
				; 9A4F	LD C,(HL)	
				; 9A50	INC HL	
	ASR	R1		; 9A51	SLA C	
	RORB	R0		; 9A53	RL B	
				; 9A55	RLA	
	ASR	R1		; 9A56	SLA C	
	RORB	R0		; 9A58	RL B	
				; 9A5A	RLA	
				; 9A5B	EX DE,HL	
	BISB	R0, (R3)+	; 9A5C	OR (HL)	
				; 9A5D	LD (HL),A	
				; 9A5E	LD A,B	
				; 9A5F	INC HL	
	BISB	R1, (R3)+	; 9A60	OR (HL)	
				; 9A61	LD (HL),A	
	SWAB	R1		; 9A62	LD A,C	
				; 9A63	INC HL	
	BISB	R1, (R3)	; 9A64	OR (HL)	
				; 9A65	LD (HL),A	
	SUB	#34., R3	; 9A66	LD BC,$FFDE	
				; 9A69	ADD HL,BC	
	POP	R0		; 9A6A	EX AF,AF'	
	SOB	R0, L9A2A	; 9A6B	DEC A		повтор цикла
				; 9A6C	JP NZ,$9A2A	
	RETURN			; 9A6F	RET	

; Routine: Draw sprite with no shift
L9A70:	MOV	R1, R3		; 9A70	LD H,B	
				; 9A71	LD L,C	
	MOV	#24., R1	; 9A72	LD B,$18	счётчик цикла = 24.
L9A74:	MOV	(R2)+, R0	; 9A74	LD A,(DE)	
	BICB	R0, (R3)+	; 9A75	AND (HL)	
				; 9A76	LD (HL),A	
				; 9A77	INC DE	
				; 9A78	INC HL	
	SWAB	R0		; 9A79	LD A,(DE)	
	BICB	R0, (R3)+	; 9A7A	AND (HL)	
				; 9A7B	LD (HL),A	
				; 9A7C	INC DE	
				; 9A7D	INC HL	
	MOVB	(R2)+, R0	; 9A7E	LD A,(DE)	
	BICB	R0, (R3)	; 9A7F	AND (HL)	
				; 9A80	LD (HL),A	
				; 9A81	INC DE	
	DEC	R3		; 9A82	DEC HL	
	DEC	R3		; 9A83	DEC HL	
	MOVB	(R2)+, R0	; 9A84	LD A,(DE)	
	BISB	R0, (R3)+	; 9A85	OR (HL)	
				; 9A86	LD (HL),A	
				; 9A87	INC DE	
				; 9A88	INC HL	
	MOV	(R2)+, R0	; 9A89	LD A,(DE)	
	BISB	R0, (R3)+	; 9A8A	OR (HL)	
				; 9A8B	LD (HL),A	
				; 9A8C	INC DE	
				; 9A8D	INC HL	
	SWAB	R0		; 9A8E	LD A,(DE)	
	BISB	R0, (R3)	; 9A8F	OR (HL)	
				; 9A90	LD (HL),A	
				; 9A91	INC DE	
				; 9A92	LD A,B	
				; 9A93	LD BC,$FFDE	
	SUB	#34., R3	; 9A96	ADD HL,BC	
				; 9A97	LD B,A	
	SOB	R1, L9A74	; 9A98	DJNZ $9A74	повтор цикла
	RETURN			; 9A9A	RET

; Routine -- Отрисовка теневого экрана
L9A9B:
	MOV	#L9BFC, R3	; 9A9B	LD HL,$9BFC	Адрес массива записей о строках теневого экрана
	MOV	(R3), R0	; 9A9E	LD A,(HL)	NOTE: Здесь byte заменён на word
L9A9F:	INC	R3		; 9A9F	INC HL	
	INC	R3
	MOV	(R3)+, R2	; 9AA0	LD E,(HL)	
				; 9AA1	INC HL	
				; 9AA2	LD D,(HL)	DE = адрес в теневом экране
				; 9AA3	INC HL	
	PUSH	R2		; 9AA4	PUSH DE	
	MOV	(R3)+, R2	; 9AA5	LD E,(HL)
				; 9AA6	INC HL	
				; 9AA7	LD D,(HL)	DE = адрес на экране -- конец выводимой строки
				; 9AA8	INC HL	
	MOV	(R3)+, R1	; 9AA9	LD C,(HL)	
				; 9AAA	INC HL	
				; 9AAB	LD B,(HL)	BC = адрес конца массива
				; 9AAC	INC HL	
	MOV	(SP), R5	; 9AAD	EX (SP),HL	теперь HL = адрес в теневом экране
	MOV	R3, (SP)
	MOV	R5, R3
	MOV	R0, R4		; 9AAE	LD IXh,A	счётчик цикла по строке
L9AB0:	MOVB	(R1), R0	; 9AB0	LD A,(BC)	<
				; 9AB1	AND A		|  пусто?
	BEQ	L9ACA		; 9AB2	JP Z,$9ACA	|  да => переходим
	DEC	R0		; 9AB5	DEC A		|
	MOVB	R0, (R1)	; 9AB6	LD (BC),A	|
	MOV	R1, R5		; 9AB7	LD IXl,B	|  сохраняем B
	MOV	#8., R1		; 9AB9	LD B,$08	|  Цикл по строкам знакоместа, 8. строк
L9ABB:	MOVB	(R3), R0	; 9ABB	LD A,(HL)	|  <
	BIS	#177400, R0			;	|  |
	MOV	R2, @#176640	; 9ABC	LD (DE),A	|  |  косвенный адрес
	MOV	R0, @#176642			;	|  |  выводим на экран
	SUB	#80., R2	; 9ABD	DEC D		|  |  к предыдущей строке экрана
				; 9ABE	LD A,$E0	|  |
	SUB	#32., R3	; 9AC0	ADD A,L		|  |  к предыдущей строке теневого экрана
				; 9AC1	LD L,A		|  |
	SOB	R1, L9ABB	; 9AC2	DJNZ $9ABB	|  продолжение цикла по строкам
				; 9AC4	LD A,D	        |
	ADD	#640., R2	; 9AC5	ADD A,$08	|  на 8. экранных строк ниже
	ADD	#256., R3	; 9AC7	LD D,A	        |  
	MOV	R5, R1		; 9AC8	LD B,IXl	|  восстанавливаем B
L9ACA:						;	|
	DEC	R3		; 9ACA	DEC L		|
	DEC	R2		; 9ACB	DEC E		|  к предыдущей позиции в строке
	DEC	R1		; 9ACC	DEC C		|  к предыдущему элементу массива
	SOB	R4, L9AB0	; 9ACD	DEC IXh		|
				; 9ACF	JP NZ,$9AB0	продолжение цикла по строке
	POP	R3		; 9AD2	POP HL	
	MOVB	(R3), R0	; 9AD3	LD A,(HL)	
				; 9AD4	AND A	
	BNE	L9A9F		; 9AD5	JP NZ,$9A9F	продолжение цикла по строкам
;
	MOVB	L8F0B, R0	; 9AD8	LD A,($8F0B)	
	CMPB	R0, #106.	; 9ADB	CP $6A	
	BHIS	L9B72		; 9ADD	JP NC,$9B72	
	NEG	R0		; 9AE0	LD B,A	
	ADD	#106., R0	; 9AE1	LD A,$6A	
				; 9AE3	SUB B	
	ADD	R0, R0		; 9AE4	ADD A,A	
L9AE5:	MOV	#200., R1	; 9AE5	LD B,$C8	
L9AE7:	SOB	R1, L9AE7	; 9AE7	DJNZ $9AE7	задержка ???
				; 9AE9	DEC A	
	SOB	R0, L9AE5	; 9AEA	JR NZ,$9AE5	
	BR	L9B72		; 9AEC	JP $9B72	
;
L9AEF:	MOVB	L8F15, R0	; 9AEF	LD A,($8F15)	
	BIT	R0, #2		; 9AF2	BIT 1,A	
	BEQ	L9B01		; 9AF4	JR Z,$9B01	
		; 9AF6	LD L,$04	
		; 9AF8	LD D,$46	
		; 9AFA	LD E,$08	
		; 9AFC	LD H,$FA	
	BR	L9B5B		; 9AFE	JP $9B5B	
L9B01:		; 9B01	LD HL,$9B46
	;TODO
	RETURN ;STUB

; Sound. This entry point is used by the routine at A694.
L9B2C:

; Sound. This entry point is used by the routine at A694.
L9B5B:

L9B72:
	;TODO
	RETURN ;STUB

L9C7B:
	;TODO
	RETURN ;STUB

; Data block: 18 записей для отрисовки теневого экрана
L9BFC:	.WORD	012, <LFD00-1027>, 133775, <LFD00+553.>	; 0A FAE9 5729 FF29  строка 18
	.WORD	014, <LFD00-1425>, 132577, <LFF29-36> 	; 0C F9EB 570B FF0B
	.WORD	016, <LFD00-2023>, 131401, <LFF29-74> 	; 0E F8ED 4FED FEED
	.WORD	020, <LFD00-2421>, 130203, <LFF29-132> 	; 10 F7EF 4FCF FECF
	.WORD	022, <LFD00-3017>, 127005, <LFF29-170> 	; 12 F6F1 4FB1 FEB1
	.WORD	024, <LFD00-3415>, 125607, <LFF29-226> 	; 14 F5F3 4F93 FE93
	.WORD	026, <LFD00-4013>, 124411, <LFF29-264> 	; 16 F4F5 4F75 FE75
	.WORD	030, <LFD00-4411>, 123213, <LFF29-322> 	; 18 F3F7 4F57 FE57
	.WORD	032, <LFD00-5007>, 122015, <LFF29-360> 	; 1A F2F9 4F39 FE39
	.WORD	033, <LFD00-5405>, 120617, <LFF29-416> 	; 1B F1FB 4F1B FE1B
	.WORD	033, <LFD00-6003>, 117421, <LFF29-454> 	; 1B F0FD 47FD FDFD
	.WORD	033, <LFD00-6401>, 116223, <LFF29-512> 	; 1B EFFF 47DF FDDF
	.WORD	031, <LFD00-7001>, 115023, <LFF29-552> 	; 19 EEFF 47BF FDBF
	.WORD	027, <LFD00-7401>, 113623, <LFF29-612> 	; 17 EDFF 479F FD9F
	.WORD	025, <LE900+1777>, 112423, <LFF29-652> 	; 15 ECFF 477F FD7F
	.WORD	023, <LE900+1377>, 111223, <LFF29-712> 	; 13 EBFF 475F FD5F  строка 3
	.WORD	021, <LE900+777>,  110023, <LFF29-752> 	; 11 EAFF 473F FD3F  строка 2
	.WORD	017, <LE900+377>,  106623, <LFF29-1012>	; 0F E9FF 471F FD1F  строка 1
	.WORD	000

; Routine
; Used by the routine at A11B.
LA10B:
	MOV	R0, <LA119+2>	; A10B	EX AF,AF'	save AF
	MOVB	L8F18, R0	; A10C	LD A,($8F18)	
	MOV	#55000, R1	; A10F	LD B,$5A	Screen attribute area
	INC	R0		; A111	INC A	
	MOVB	R0, L8F18	; A112	LD ($8F18),A	
	ADD	R0, R1		; A115	LD C,A	
		; A116	LD A,$44	
;	MOVB	#104, (R1)	; A118	LD (BC),A	NOTE: Writing attribute, skipping
LA119:	MOV	#12345, R0	; A119	EX AF,AF'	restore AF
	RETURN			; A11A	RET	

; Routine
; Used by the routines at A03B and A34D.
LA11B:
	MOV	L8F01, R2	; A11B	LD DE,($8F01)	
	ADD	#8., R2		; A11F	LD A,$08	
				; A121	ADD A,E	
				; A122	LD E,A	
	MOVB	(R2), R0	; A123	LD A,(DE)	
				; A124	BIT 7,A	
	BPL	1$
	JMP	LA1F8		; A126	JP NZ,$A1F8	
1$:	MOVB	L8F14, R0	; A129	LD A,($8F14)	
	BIC	#177400, R0
	MOV	R0, R1		; A12C	LD B,A	
	CLR	R0		; A12D	XOR A	
	MOV	#L8F1D, R3	; A12E	LD HL,$8F1D	
	ASRB	(R3)		; A131	SRL (HL)	
	BNE	LA155		; A133	JP NZ,$A155	
	BIT	R1, #4		; A136	BIT 2,B	
	BEQ	LA144		; A138	JR Z,$A144	
	MOVB	(R2), R0	; A13A	LD A,(DE)	
	DEC	R0		; A13B	DEC A	
	CMPB	R0, #3		; A13C	CP $03	
	BHIS	LA155		; A13E	JR NC,$A155	
	MOVB	R0, (R2)	; A140	LD (DE),A	
	BR	LA14F		; A141	JP $A14F	
LA144:	BITB	R1, #2		; A144	BIT 1,B	
	BEQ	LA155		; A146	JR Z,$A155	
	MOVB	(R2), R0	; A148	LD A,(DE)	
	INC	R0		; A149	INC A	
	CMPB	R0, #3		; A14A	CP $03	
	BHIS	LA155		; A14C	JR NC,$A155	
	MOVB	R0, (R2)	; A14E	LD (DE),A	
LA14F:	CMPB	R0, #1		; A14F	CP $01	
	BNE	LA155		; A151	JR NZ,$A155	
	MOVB	#377, (R3)	; A153	LD (HL),$FF	
LA155:	INC	R3		; A155	INC HL	
	DEC	R2		; A156	DEC E	
	ASRB	(R3)		; A157	SRL (HL)	
	BNE	LA170		; A159	JP NZ,$A170	
	MOVB	#2, (R3)	; A15C	LD (HL),$02	
	BITB	R1, #8.		; A15E	BIT 3,B	
	BEQ	LA167		; A160	JR Z,$A167	
	MOVB	(R2), R0	; A162	LD A,(DE)	
	INC	R0		; A163	INC A	
	BIC	#8., R0		; A164	RES 3,A	
	MOVB	R0, (R2)	; A166	LD (DE),A	
LA167:	BITB	R1, #16.	; A167	BIT 4,B	
	BEQ	LA170		; A169	JR Z,$A170	
	MOVB	(R2), R0	; A16B	LD A,(DE)	
	DEC	R0		; A16C	DEC A	
	BIC	#177407, R0	; A16D	AND $07	
	MOVB	R0, (R2)	; A16F	LD (DE),A	
LA170:	MOV	R3, R2		; A170	EX DE,HL	
	MOV	#L8A60, R3	; A171	LD HL,$8A60	
	INC	R2		; A174	INC DE	
	MOVB	(R2), R0	; A175	LD A,(DE)	
	CMPB	R0, #2		; A176	CP $02	
	BNE	1$	
	CALL	LA10B		; A178	CALL Z,$A10B	
1$:	TSTB	R0		; A17B	AND A	
	BNE	LA181		; A17C	JR NZ,$A181	
	MOVB	#376, (R3)	; A17E	LD (HL),$FE	
	INC	R0		; A180	INC A	
LA181:	DEC	R0		; A181	DEC A	
	MOVB	R0, (R2)+	; A182	LD (DE),A	
				; A183	INC DE	
				; A184	LD BC,$0010	
	ADD	#16., R3	; A187	ADD HL,BC	
	MOVB	(R2), R0	; A188	LD A,(DE)	
	CMP	R0, #2		; A189	CP $02	
	BNE	1$
	CALL	LA10B		; A18B	CALL Z,$A10B	
1$:	TSTB	R0		; A18E	AND A	
	BNE	LA194		; A18F	JR NZ,$A194	
	MOVB	#176, (R3)	; A191	LD (HL),$FE	
	INC	R0		; A193	INC A	
LA194:	DEC	R0		; A194	DEC A	
	MOVB	R0, (R2)	; A195	LD (DE),A	
	INC	R2		; A196	INC DE	
				; A197	LD BC,$0010	
	ADD	#16., R3	; A19A	ADD HL,BC	
	MOVB	(R2), R0	; A19B	LD A,(DE)	
	CMPB	R0, #2		; A19C	CP $02	
	BNE	1$
	CALL	LA10B		; A19E	CALL Z,$A10B	
1$:	TSTB	R0		; A1A1	AND A	
	BNE	LA1A7		; A1A2	JR NZ,$A1A7	
	MOVB	#176, (R3)	; A1A4	LD (HL),$FE	
	INC	R0		; A1A6	INC A	
LA1A7:	DEC	R0		; A1A7	DEC A	
	MOVB	R0, (R2)	; A1A8	LD (DE),A	
	MOV	R3, R5		; A1A9	EX DE,HL	
	MOV	R2, R3
	MOV	R5, R2
	INC	R3		; A1AA	INC HL	
	ASR	(R3)		; A1AB	SRL (HL)	
	BNE	LA1F8		; A1AD	JP NZ,$A1F8	
	MOVB	R0, L8F14	; A1B0	LD A,($8F14)	
	BIT	R0, #1		; A1B3	BIT 0,A	
	BEQ	LA1F8		; A1B5	JP Z,$A1F8	
	DEC	R3		; A1B8	DEC HL	
	MOV	R3, R5		; A1B9	EX DE,HL	
	MOV	R2, R3
	MOV	R5, R2
	MOVB	(R2), R0	; A1BA	LD A,(DE)	
				; A1BB	AND A	
	BEQ	LA1CD		; A1BC	JR Z,$A1CD	
	DEC	R2		; A1BE	DEC DE	
				; A1BF	LD BC,$FFF0	
	ADD	#177760, R3	; A1C2	ADD HL,BC	
	MOVB	(R2), R0	; A1C3	LD A,(DE)	
				; A1C4	AND A	
	BEQ	LA1CD		; A1C5	JR Z,$A1CD	
	ADD	#177760, R3	; A1C7	ADD HL,BC	
	DEC	R2		; A1C8	DEC DE	
	MOVB	(R2), R0	; A1C9	LD A,(DE)	
				; A1CA	AND A	
	BNE	LA1F8		; A1CB	JR NZ,$A1F8	
LA1CD:		; A1CD	EX DE,HL	
	MOVB	#22., (R3)	; A1CE	LD (HL),$16	
				; A1D0	LD HL,$8F22	
	MOVB	#2, L8F22	; A1D3	LD (HL),$02	
	MOV	L8F01, R3	; A1D5	LD HL,($8F01)	берём адрес откуда копировать
	MOV	#5, R1		; A1D8	LD BC,$0005	5 байт
1$:	MOVB	(R3)+, (R2)+	; A1DB	LDIR		копируем
	SOB	R1, 1$
	INC	R3		; A1DD	INC L	
	INC	R3		; A1DE	INC L	
	INC	R2		; A1DF	INC E	
	INC	R2		; A1E0	INC E	
	MOVB	(R3)+, (R2)+	; A1E1	LDI	
	INC	R3		; A1E3	INC L	
	INC	R2		; A1E4	INC E	
				; A1E5	LD A,(HL)	
	MOVB	(R3), (R2)	; A1E6	LD (DE),A	
;
	MOVB	L8F18, R0	; A1E7	LD A,($8F18)	
	BIC	#177400, R0
	MOV	#55000, R3	; A1EA	LD H,$5A	Screen attribute area
	ADD	R0, R3		; A1EC	LD L,A	
;	CLRB	(R3)		; A1ED	LD (HL),$00	NOTE: Writing attribute, skipping
	DEC	R0		; A1EF	DEC A	
	MOVB	R0, L8F18	; A1F0	LD ($8F18),A	
	MOV	L8F15, R3	; A1F3	LD HL,$8F15	
	BISB	#2, (R3)	; A1F6	SET 1,(HL)	
LA1F8:
	MOV	#L8F0E, R3	; A1F8	LD HL,$8F0E	
	MOV	L8F01, R4	; A1FB	LD IX,($8F01)	
	MOVB	7(R4), R0	; A1FF	LD A,(IX+$07)	
	ADD	R0, R0		; A202	ADD A,A	
	MOVB	R0, (R3)	; A203	LD (HL),A	
	MOV	#LA28F, R3	; A204	LD HL,$A28F	
	CLR	R0		; A207	XOR A	
	CMPB	(R3), R0	; A208	CP (HL)	
	BEQ	LA20F		; A209	JR Z,$A20F	
	DEC	(R3)		; A20B	DEC (HL)	
	BR	LA233		; A20C	JP $A233	
LA20F:	MOVB	#3, (R3)	; A20F	LD (HL),$03	
	MOV	#L8F0F, R3	; A211	LD HL,$8F0F	
	MOVB	LA28D, R1	; A214	LD A,($A28D)	
				; A217	LD B,A	
	MOVB	(R3), R0	; A218	LD A,(HL)	
	ADD	R1, R0		; A219	ADD A,B	
	CMP	R0, #7		; A21A	CP $07	
	BLO	LA227		; A21C	JR C,$A227	
	MOV	R1, R0		; A21E	LD A,B	
	NEGB	R0		; A21F	NEG	
	MOVB	R0, LA28D	; A221	LD ($A28D),A	
	MOV	R0, R1		; A224	LD B,A	
	MOVB	(R3), R0	; A225	LD A,(HL)	
	BIC	#177400, R0
	ADD	R1, R0		; A226	ADD A,B	
LA227:	MOVB	R0, (R3)+	; A227	LD (HL),A	
				; A228	INC L	
	INC	R3		; A229	INC L	
	MOVB	(R3), R0	; A22A	LD A,(HL)	
	BIC	#177400, R0
	INC	R0		; A22B	INC A	
	INC	R0		; A22C	INC A	
	CMP	R0, #7		; A22D	CP $07	
	BLO	LA232		; A22F	JR C,$A232	
	CLR	R0		; A231	XOR A	
LA232:	MOVB	R0, (R3)	; A232	LD (HL),A	
LA233:	MOV	#LA290, R3	; A233	LD HL,$A290	
				; A236	XOR A	
	TSTB	(R3)		; A237	CP (HL)	
	BEQ	LA23F		; A238	JP Z,$A23F	
	DEC	(R3)		; A23B	DEC (HL)	
	BR	LA263		; A23C	JP $A263	
LA23F:	MOVB	#2, (R3)	; A23F	LD (HL),$02	
	MOV	#L8F10, R3	; A241	LD HL,$8F10	
	MOVB	LA28E, R0	; A244	LD A,($A28E)	
	BIC	#177400, R0
	MOV	R0, R1		; A247	LD B,A	
	MOVB	(R3), R0	; A248	LD A,(HL)	
	BIC	#177400, R0
	ADD	R1, R0		; A249	ADD A,B	
	CMP	R0, #7		; A24A	CP $07	
	BLO	LA257		; A24C	JR C,$A257	
	MOV	R1, R0		; A24E	LD A,B	
	NEGB	R0		; A24F	NEG	
	MOVB	R0, LA28E	; A251	LD ($A28E),A	
	MOV	R0, R1		; A254	LD B,A	
	MOVB	(R3), R0	; A255	LD A,(HL)	
	BIC	#177400, R0
	ADD	R1, R0		; A256	ADD A,B	
LA257:	MOVB	R0, (R3)+	; A257	LD (HL),A	
				; A258	INC L	
	INC	R3		; A259	INC L	
	MOVB	(R3), R0	; A25A	LD A,(HL)	
	BIC	#177400, R0
	INC	R0		; A25B	INC A	
	INC	R0		; A25C	INC A	
	CMP	R0, #7		; A25D	CP $07	
	BLO	LA262		; A25F	JR C,$A262	
	CLR	R0		; A261	XOR A	
LA262:	MOVB	R0, (R3)	; A262	LD (HL),A	
LA263:	MOV	#L8F13, R3	; A263	LD HL,$8F13	
		; A266	LD A,(HL)	
		; A267	INC A	
		; A268	INC A	
		; A269	CP $03	
		; A26B	JR C,$A26E	
	CLR	R0		; A26D	XOR A	
LA26E:	MOVB	R0, (R3)	; A26E	LD (HL),A	
	RETURN			; A26F	RET

; Routine
LA270:
		; A270	LD DE,($5C76)	; Read RND SEED variable
		; A274	LD H,E	
		; A275	LD L,$FD	
		; A277	LD A,D	
		; A278	OR A	
		; A279	SBC HL,DE	
		; A27B	SBC A,$00	
		; A27D	SBC HL,DE	
		; A27F	SBC A,$00	
		; A281	LD E,A	
		; A282	LD D,$00	
		; A284	SBC HL,DE	
		; A286	JR NC,$A289	
		; A288	INC HL	
		; A289	LD ($5C76),HL	; Write RND SEED variable
	RETURN				; A28C	RET	

LA28D:	.BYTE	002
LA28E:	.BYTE	002
LA28F:	.WORD	000
LA290:	.BYTE	002
	.EVEN

; Routine
LA291:	MOV	#L8F25, R3		; A291	LD HL,$8F25	Copy const block
	MOV	#L8F00, R2		; A294	LD DE,$8F00	to variables block
	MOV	#<L8F25-L8F00>, R1	; A297	LD BC,$0025	
1$:	MOVB	(R3)+, (R2)+		; A29A	LDIR		copy
	SOB	R1, 1$
	CALL	LA3D3			; A29C	CALL $A3D3	Prepare screen and indicators
	CALL	L9423			; A29F	CALL $9423	
	CALL	L92CE			; A2A2	CALL $92CE	
	CALL	L95EF			; A2A5	CALL $95EF	Show the screen
	MOV	#377, L8A90		; A2A8	LD A,$FF	
					; A2AA	LD ($8A90),A	
	MOV	#1, L8A08		; A2AD	LD A,$01	
					; A2AF	LD ($8A08),A	
	CLR	R0			; A2B2	XOR A	
	MOV	#16., R1		; A2B3	LD B,$10
	CALL	LA34D			; A2B5	CALL $A34D	Main Vorton moves Lasertron
LA2B8:
	MOV	#12., R0		; A2B8	LD A,$0C	
	MOV	#1, R1			; A2BA	LD B,$01	
;TODO	CALL	LA34D			; A2BC	CALL $A34D	Main Vorton becomes white-hat and rotates
;TODO	CMP	R0, #6			; A2BF	CP $06	
;TODO	BNE	LA2B8			; A2C1	JR NZ,$A2B8	
		; A2C3	LD A,$01	
		; A2C5	LD ($8A08),A	
		; A2C8	XOR A	
		; A2C9	LD B,$0E	
		; A2CB	CALL $A34D	
LA2CE:		; A2CE	LD A,$08	
	;TODO

	RETURN ;STUB

; Routine: Main Vorton moves Lasertron
; R1 = loop counter
LA34D:
	MOVB	R0, L8F14	; A34D	LD ($8F14),A	
LA350:	PUSH	R1		; A350	PUSH BC	
	CALL	L9822		; A351	CALL $9822	
	CALL	LA11B		; A354	CALL $A11B	
	CALL	L9C7B		; A357	CALL $9C7B	
	CALL	L985A		; A35A	CALL $985A	Обновляет картинку на втором shadow-экране
	CALL	L9A9B		; A35D	CALL $9A9B	Выводит экран
	POP	R1		; A360	POP BC	
	SOB	R1, LA350	; A361	DJNZ $A350	
	MOVB	<L8A00+7>, R0	; A363	LD A,($8A07)	
	BIC	#177400, R0
	RETURN			; A366	RET

; Routine
LA367:
	CALL	LA291		; A367	CALL $A291	
	BR	LA372		; A36A	JR $A372	
LA36C:	CALL	L92CE		; A36C	CALL $92CE	
	CALL	L95EF		; A36F	CALL $95EF	Show the screen
LA372:	MOV	#LA4C7, R3	; A372	LD HL,$A4C7	"DEMO MODE"
	CALL	LB890		; A375	CALL $B890	Print Text

	;TODO

;	MOV	#LA4D6, R3	; A3B7	LD HL,$A4D6	
;	CALL	LB890		; A3BA	CALL $B890	Print Text

	;TODO

	CALL WTKEY ;STUB
	RETURN ;STUB

; Prepare screen and indicators
LA3D3:
	MOV	#GAMESC, R1		; Строка для подготовки игрового экрана
	CALL	PRINT
	CALL	PAUSE			; подождём пока очистится экран
;
	MOV	#L6020, R3	; A3E0	LD HL,$6020	
	MOV	#135304, R2	; A3E3	LD DE,$5060	
	MOV	#34., R0	; A3E6	LD A,$22	
				; A3E8	EX AF,AF'	
LA3E9:	MOV	#32., R1	; A3E9	LD BC,$0020	
				; A3EC	EX AF,AF'	
				; A3ED	PUSH DE	
1$:	MOV	R2, @#176640
	MOVB	(R3), R5	; A3EE	LDIR	
	BIC	#177400, R5
	SWAB	R5
	BISB	(R3)+, R5
	MOV	R5, @#176642
	INC	R2
	SOB	R1, 1$
				; A3F0	POP DE	
	DEC	R0		; A3F1	DEC A	
	BEQ	LA403		; A3F2	JR Z,$A403	
				; A3F4	EX AF,AF'	
	ADD	#<80.-32.>, R2	; A3F5	INC D	
		; A3F6	LD A,D	
		; A3F7	CP $58	
	BR	LA3E9	; A3F9	JR C,$A3E9	
		; A3FB	LD D,$50	
		; A3FD	LD A,$20	
		; A3FF	ADD A,E	
		; A400	LD E,A	
		; A401	JR $A3E9	
LA403:				; A403	LD DE,$5A60	Screen attribute area address
				; A406	LD BC,$00A0	
				; A409	LDIR	        Fill attributes
	CALL	LA42B		; A40B	CALL $A42B	Show score
	CALL	LA478		; A40E	CALL $A478	Show score
	RETURN			; A411	RET	

; Routine: Show score
LA414:	MOV	#<LA480+6>, R3	; A414	LD HL,$A486	
		; A417	LD A,(HL)	
		; A418	CP $00	
		; A41A	JR NZ,$A41E	
		; A41C	LD A,$01	
		; A41E	INC A	
		; A41F	CP $0B	
		; A421	JR NZ,$A428	
		; A423	LD (HL),$01	
		; A425	DEC HL	
		; A426	JR $A417	
		; A428	LD (HL),A	
		; A429	DJNZ $A414	
LA42B:	MOV	#141261, R2	; A42B	LD DE,$529D	address on the screnn	
	MOV	#<LA480+6>, R1	; A42E	LD BC,$A486	score	
LA431:	MOVB	(R1), R0	; A431	LD A,(BC)	
	BIC	#177400, R0
	CMPB	R0, #377	; A432	CP $FF	
	BNE	1$		; A434	RET Z	
	RETURN
1$:	PUSH	R1		; A435	PUSH BC	
	MOV	R0, R1		; A436	LD C,A	
	ASL	R0		; A437	ADD A,A	
	ASL	R0		; A438	ADD A,A	
	ADD	R1, R0		; A439	ADD A,C	
	MOV	#LA490, R3	; A43A	LD HL,$A490	
				; A43D	LD C,A	
				; A43E	LD B,$00	
	ADD	R0, R3		; A440	ADD HL,BC	
	MOV	R2, R5		; A441	LD C,D	
	MOV	#5, R1		; A442	LD B,$05	
LA444:	MOVB	(R3), R0	; A444	LD A,(HL)	
	BIC	#177400, R0
	SWAB	R0
	BISB	(R3)+, R0
	MOV	R2, @#176640
	MOV	R0, @#176642	; A445	LD (DE),A	
	ADD	#80., R2	; A446	INC D		next line
				; A447	INC HL	
	SOB	R1, LA444	; A448	DJNZ $A444	
	MOV	R5, R2		; A44A	LD D,C	
	DEC	R2		; A44B	DEC E		previous position
	POP	R1		; A44C	POP BC	
	DEC	R1		; A44D	DEC BC	
	BR	LA431		; A44E	JR $A431	

LA450:
	;TODO
LA478:
	MOV	#137001, R2	; A478	LD DE,$51DD	address on the screen
	MOV	#<LA480+14.>, R1	; A47B	LD BC,$A48E	score
	BR	LA431		; A47E	JR $A431	

LA480:	.BYTE	377,000,000,000,000,000,000,001,377,000,000,000,000,000,000,001	; Score and High Score
LA490:	.BYTE	177,177,177,177,177	; 000  
	.BYTE	101,135,135,135,101	; 001 0
	.BYTE	137,137,137,137,137	; 002 1
	.BYTE	101,137,101,175,101	; 003 2
	.BYTE	101,137,101,137,101	; 004 3
	.BYTE	135,135,101,137,137	; 005 4
	.BYTE	101,175,101,137,101	; 006 5
	.BYTE	101,175,101,135,101	; 007 6
	.BYTE	101,137,137,137,137	; 010 7
	.BYTE	101,135,101,135,101	; 011 8
	.BYTE	101,135,101,137,101	; 012 9
	.EVEN
LA4C7:	.WORD	106705
	.BYTE	130,312,124,125,135,137,115,135,137,124,125,312,376	; DEMO MODE
	.EVEN
LA4D6:	.WORD	116304
	.BYTE	130,112,144,130,125,142,125,115,131,143,112,377
	.WORD	117504
	.BYTE	130,112,137,136,134,151,115,137,136,125,115,147,121,151,112,377
	.WORD	120704
	.BYTE	130,112,144,137,115,125,136,123,137,145,136,144,125,142,112,377
	.WORD	122104
	.BYTE	131,112,147,130,121,144,115,134,131,125,143,115,122,125,151,137,136,124,112,377
	.WORD	123304
	.BYTE	131,112,152,137,136,125,115,152,125,142,137,120,112,377
	.WORD	124504
	.BYTE	131,312,143,137,115,127,125,144,115,137,136,115,147,131,144,130,115,131,144,120,312,376
	.EVEN

LA546:
	RETURN ;STUB

LA8D6:
	RETURN ;STUB

; Start point
LB0DE:
		; B0DE	LD BC,$F300
LB0E1:
		; B0E1	LD HL,$785A	
		; B0E4	CALL $B203	Sound
LB0E7:		; B0E7	XOR A	
		; B0E8	IN A,($FE)	
		; B0EA	CPL	
		; B0EB	AND $1F	
		; B0ED	JR NZ,$B0E7	
	CALL	LB2DA		; B0EF	CALL $B2DA	Prepare shadow screen
	MOV	#0, LB4CF	; B0F2	XOR A	
				; B0F3	LD ($B4CF),A	
	CALL	LB39A		; B0F6	CALL $B39A	Prepare screen with attributes
	MOV	#104, LB4CF	; B0F9	LD A,$44	
				; B0FB	LD ($B4CF),A	
	CALL	LB39A		; B0FE	CALL $B39A	Prepare screen with attributes
	CALL	LB33C		; B101	CALL $B33C	"HIGHWAY ENCOUNTER" big sign
	MOV	#LB21E, R3	; B104	LD HL,$B21E	
	CALL	LB890		; B107	CALL $B890	Print Text
	MOV	#PORTBY, R3
	CALL	LB531			; Print Small Font

	;TODO
LB13C:
	;TODO

1$:	CALL	WTKEY ;STUB
	CMP	R0, #065		; '5' ?
	BNE	2$
	JMP	LB4D0		; B1BC	JP $B4D0	Show Info Screen
2$:	CMP	R0, #066		; '6' ?
	BNE	3$
	CALL	LA367		; B17C	CALL $8F79	JP A367
	BR	LB0E7		; B17F	JP $B0E7
3$:	CMP	R0, #060		; '0' ?
	BNE	4$
	JMP	FINISH			; Завершение работы
4$:
	BR	LB13C		; B200	JP $B13C
	RETURN ;STUB

; Routine: Sound
LB203:
	RETURN ;STUB

PORTBY:	
;	.WORD	106704
;	.ASCII	/PORT@TO@UKNC@/
;	.BYTE	377
	.WORD	110104
;	.ASCII	/@BY@NZEEMIN@@/
;	.BYTE	377
;	.WORD	141133
.INCLUDE /VERSIO.MAC/
	.BYTE	376
	.EVEN

; Text for Title Screen
LB21E:	.WORD	106716
	.BYTE	130,212,121,145,144,130,137,142,115,123,137,143,144,121,115,140	; AUTHOR
	.BYTE	121,136,121,151,131,212,377,000
	.WORD	124533
	.BYTE	131,300,212,025,050,031,044,377					; 0 EXIT
;	.WORD	127127
;	.BYTE	131,301,212,033,025,051,022,037,021,042,024,377			; 1 KEYBOARD
;	.WORD	130325
;	.BYTE	131,302,212,031,036,044,025,042,026,021,023,025,015,002,377,000 ; 2 INTERFACE 2
;	.WORD	131523
;	.BYTE	132,303,212,033,025,035,040,043,044,037,036,377			; 3 KEMPSTON
;	.WORD	132721
;	.BYTE	132,304,212,040,042,037,044,025,033,014,021,027,026,377		; 4 PROTEK/AGF
	.WORD	135315
	.BYTE	132,305,212,031,036,026,037,042,035,021,044,031,037,036,377,000	; 5 INFORMATION
	.WORD	136513
	.BYTE	132,306,212,024,025,035,037,036,043,044,042,021,044,031,037,036,377,000	; 6 DEMONSTRATION
	.WORD	137711
	.BYTE	132,307,212,043,044,021,042,044,015,027,021,035,025,377		; 7 START GAME
	.WORD	142304
	.BYTE	132,212,123,137,140,151,142,131,127,130,144,115,101,111,110,105	; COPYRIGHT 1985 VORTEX SOFTWARE
	.BYTE	115,146,137,142,144,125,150,115,143,137,126,144,147,121,142,125,212,376
	.EVEN

; Routine: Prepare shadow screen
LB2DA:	MOV	#LD900, R3	; B2DA	LD HL,$D900	
				; B2DD	LD DE,$D901
	CLR	R0		; B2E0	LD (HL),$00
;	MOV #177777,R0;DEBUG		
	MOV	#3500., R1	; B2E2	LD BC,$1B58
1$:	MOV	R0, (R3)+	; B2E5	LDIR
	SOB	R1, 1$
	MOV	#LDF00, R3	; B2E7	LD HL,$DF00	
	MOV	R3, R2		; B2EA	LD D,H	
				; B2EB	LD E,L	
	MOV	#L7100, R4	; B2EC	LD IX,$7100	
	MOV	#8., R1		; B2F0	LD B,$08	
LB2F2:	PUSH	R1		; B2F2	PUSH BC
	MOVB	10(R4), R0	; B2F3	LD A,(IX+$08)	
	MOVB	R0, (R2)+	; B2F6	LD (DE),A	
				; B2F7	INC DE	
	MOVB	(R4)+, R0	; B2F8	LD A,(IX+$00)	
	MOVB	R0, (R2)+	; B2FB	LD (DE),A	
				; B2FC	INC DE	
	MOV	#30.,R1		; B2FD	LD BC,$001E	
2$:	MOVB	(R3)+, (R2)+	; B300	LDIR	
	SOB	R1, 2$
				; B302	INC IX	
	INC	R3		; B304	INC HL	
	INC	R3		; B305	INC HL	
	POP	R1		; B306	POP BC	
	SOB	R1, LB2F2	; B307	DJNZ $B2F2	
	SUB	#256., R3	; B309	DEC H	
	MOV	#10500, R1	; B30A	LD BC,$1140	
3$:	MOVB	(R3)+, (R2)+	; B30D	LDIR	
	SOB	R1, 3$		
	MOV	#LDF00, R3	; B30F	LD HL,$DF00	
	MOV	#<LDF00+1>, R2	; B312	LD DE,$DF01	
	MOVB	#377, (R3)	; B315	LD (HL),$FF	
	MOV	#31., R1	; B317	LD BC,$001F	
4$:	MOVB	(R3)+, (R2)+	; B31A	LDIR	
	SOB	R1, 4$
	MOV	#LDF00, R3	; B31C	LD HL,$DF00	
	MOV	#<LDBC0+5504.>, R2	; B31F	LD DE,$F140	
	MOV	#32., R1	; B322	LD BC,$0020	
5$:	MOVB	(R3)+, (R2)+	; B325	LDIR	
	SOB	R1, 5$
	MOV	#<LDF00+32.>, R3	; B327	LD HL,$DF20	
	MOV	#31., R2	; B32A	LD DE,$001F	
	MOV	#146., R1	; B32D	LD B,$92	
LB32F:	BISB	#1, (R3)	; B32F	LD A,(HL)	
				; B330	OR $80	
				; B332	LD (HL),A	
	ADD	R2, R3		; B333	ADD HL,DE	
	BISB	#200, (R3)+	; B334	LD A,(HL)	
				; B335	OR $01	
				; B337	LD (HL),A	
				; B338	INC HL	
	SOB	R1, LB32F	; B339	DJNZ $B32F	
	RETURN			; B33B	RET	

LB33C:	MOV	#LB499, R3		; B33C	LD HL,$B499	"HIGHWAY ENCOUNTER" pixels address
	MOV	#LD900, R2		; B33F	LD DE,$D900	title sign buffer
	MOV	#50., R1		; B342	LD BC,$0032	50 bytes
1$:	MOVB	(R3)+, (R2)+		; B345	LDIR		copy
	MOV	#<LDF00+22.>, R1	; B347	LD BC,$DF16	address on shadow screen
	MOVB	#8., R0			; B34A	LD A,$08	
	MOV	#LD900, R3		; B34C	LD HL,$D900	title sign buffer
	CALL	LB3D8			; B34F	CALL $B3D8	
	MOV	#<LDF00+119.>, R1	; B352	LD BC,$DF77	
	MOVB	#16., R0		; B355	LD A,$10	
	CALL	LB3D8			; B357	CALL $B3D8	
	MOV	#<LDF00+216.>, R1	; B35A	LD BC,$DFD8	
	MOVB	#24., R0		; B35D	LD A,$18	
	CALL	LB3D8			; B35F	CALL $B3D8	
	MOV	#<LDF00+312.>, R1	; B362	LD BC,$E038	
	CLRB	R0			; B365	LD A,$00	
	CALL	LB3D8			; B367	CALL $B3D8	
	MOV	#<LDF00+409.>, R1	; B36A	LD BC,$E099	
	MOVB	#8., R0			; B36D	LD A,$08	
	CALL	LB3D8			; B36F	CALL $B3D8	
	MOV	#<LDF00+603.>, R1	; B372	LD BC,$E15B	
	MOVB	#24., R0		; B375	LD A,$18	
	CALL	LB3D8			; B377	CALL $B3D8	
	MOV	#<LDF00+699.>, R1	; B37A	LD BC,$E1BB	
	CLRB	R0			; B37D	LD A,$00	
	CALL	LB3D8			; B37F	CALL $B3D8	
	MOV	#<LDF00+796.>, R1	; B382	LD BC,$E21C	
	MOVB	#8., R0			; B385	LD A,$08	
	CALL	LB3D8			; B387	CALL $B3D8	
	MOV	#<LDF00+893.>, R1	; B38A	LD BC,$E27D	
	MOVB	#16., R0		; B38D	LD A,$10	
	CALL	LB3D8			; B38F	CALL $B3D8	
	MOV	#<LDF00+990.>, R1	; B392	LD BC,$E2DE	
	MOVB	#24., R0		; B395	LD A,$18	
	CALL	LB3D8			; B397	CALL $B3D8	
;
; Routine: Prepare screen
LB39A:	;STUB
; Copy shadow screen to the real screen, 256. x 192. pixels
LB3A9:
	MOV	#176640, R4		; Адрес порта адреса косвенной записи УКНЦ
	MOV	#176642, R5		; Адрес порта данных косвенной записи УКНЦ
	MOV	#105504, R2		; Адрес на реальном экране

	MOV	#18., R0		; Количество верхних пустых строк
10$:	MOV	#8., R1			; Счётчик по строке
11$:	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	CLR	(R5)			; Пишем в экран
	INC	R2
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	CLR	(R5)			; Пишем в экран
	INC	R2
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	CLR	(R5)			; Пишем в экран
	INC	R2
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	CLR	(R5)			; Пишем в экран
	INC	R2
	SOB	R1, 11$
	ADD	#<80.-32.>, R2		; К следующей строке
	SOB	R0, 10$

	MOV	#<LDBC0+576.>, R3
	MOV	#<192.-18.-19.>, R0	; Количество копируемых строк
1$:	PUSH	R0
	MOV	#8., R1			; Счётчик по строке
2$:	MOVB	(R3)+, R0		; берём байт
	BIC    	#177400, R0		; оставляем младший байт
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	R0, (R5)		; Пишем в экран
	INC	R2
	MOVB	(R3)+, R0		; берём байт
	BIC    	#177400, R0		; оставляем младший байт
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	R0, (R5)		; Пишем в экран
	INC	R2
	MOVB	(R3)+, R0		; берём байт
	BIC    	#177400, R0		; оставляем младший байт
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	R0, (R5)		; Пишем в экран
	INC	R2
	MOVB	(R3)+, R0		; берём байт
	BIC    	#177400, R0		; оставляем младший байт
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	R0, (R5)		; Пишем в экран
	INC	R2
	SOB	R1, 2$
	ADD	#<80.-32.>, R2		; К следующей строке
	POP	R0
	SOB	R0, 1$			; продолжаем цикл по строкам

	MOV	#19., R0		; Количество нижних пустых строк
30$:	MOV	#8., R1			; Счётчик по строке
31$:	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	CLR	(R5)			; Пишем в экран
	INC	R2
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	CLR	(R5)			; Пишем в экран
	INC	R2
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	CLR	(R5)			; Пишем в экран
	INC	R2
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	CLR	(R5)			; Пишем в экран
	INC	R2
	SOB	R1, 31$
	ADD	#<80.-32.>, R2		; К следующей строке
	SOB	R0, 30$

	RETURN

; Routine for Title Screen
LB3D8:	MOV	#LBFB0, LB4CD		; B3D8	LD DE,$BFB0	Mask and sprite = BFB0
					; B3DB	LD ($B4CD),DE	-- Pyramid block appears, phase 1
	CALL	LB41B			; B3DF	CALL $B41B	
	MOV	#LB980, LB4CD		; B3E2	LD DE,$B980	Mask and sprite = B980
					; B3E5	LD ($B4CD),DE	-- Pyramid block appears, phase 2
	CALL	LB41B			; B3E9	CALL $B41B	
	MOV	#LBA10, LB4CD		; B3EC	LD DE,$BA10	Mask and sprite = BA10
					; B3EF	LD ($B4CD),DE	-- Pyramid block appears, phase 3
	CALL	LB41B			; B3F3	CALL $B41B	
	MOV	#LB8F0, LB4CD		; B3F6	LD DE,$B8F0	Mask and sprite = B8F0
					; B3F9	LD ($B4CD),DE	-- Pyramid block used on the title screen
	CALL	LB427			; B3FD	CALL $B427	
	ADD	#5, R3			; B400	LD DE,$0005	
					; B403	ADD HL,DE	
	PUSH	R3			; B404	PUSH HL	
	MOV	#<LDF00+32.>, R3	; B405	LD HL,$DF20	
	MOV	#31., R2		; B408	LD DE,$001F	
	MOV	#130., R1		; B40B	LD B,$82	
LB40D:	BISB	#1, (R3)		; B40D	LD A,(HL)	
					; B40E	OR $80	
					; B410	LD (HL),A	
	ADD	R2, R3			; B411	ADD HL,DE	
	BISB	#200, (R3)+		; B412	LD A,(HL)	
					; B413	OR $01	
					; B415	LD (HL),A	
					; B416	INC HL	
	SOB	R1, LB40D		; B417	DJNZ $B40D	
	POP	R3			; B419	POP HL	
	RETURN				; B41A	RET	

; Routine
; Used by the routine at B3D8
LB41B:
		; B41B	EX AF,AF'	
		; B41C	XOR A	
		; B41D	IN A,($FE)	
		; B41F	CPL	
		; B420	AND $1F	
		; B422	JR Z,$B426	
		; B424	EX AF,AF'	
		; B425	RET	
		; B426	EX AF,AF'
; This entry point is used by the routine at B3D8
; A = 0 / 8. / 16. / 24.
LB427:
	PUSH	R3		; B427	PUSH HL	
	PUSH	R1		; B428	PUSH BC	
	PUSH	R0		; B429	PUSH AF	
	MOV	R3, LB4CB	; B42A	LD ($B4CB),HL	save HL
	ADD	#4, R3		; B42D	INC L	
				; B42E	INC L	
				; B42F	INC L	
				; B430	INC L	
	MOVB	#36., R2	; B431	LD E,$24	Loop counter = 36
LB433:	PUSH	R2		; B433	PUSH DE		save loop counter
	BITB	#1, (R3)	; B434	BIT 0,(HL)	
	BEQ	LB463		; B436	JR Z,$B463	
	MOVB	R0, R3		; B438	LD E,A	
				; B439	LD D,$00	
	ADD	#LB446, R3	; B43B	LD HL,$B446	
				; B43E	ADD HL,DE	
	PUSH	R0		; B43F	PUSH AF	
	PUSH	R1		; B440	PUSH BC	
	MOV	LB4CD, R2	; B441	LD DE,($B4CD)	Get mask and sprite address
	JMP	(R3)		; B445	JP (HL)	
LB446:	CALL	L9933		; B446	CALL $8F85	0. -- JP 9933 Draw sprite with shift by -2px
	BR	LB461		; B449	JP $B461	
	NOP			; B44C	NOP	
				; B44D	NOP	
	CALL	L9A70		; B44E	CALL $8F82	8. -- JP 9A70 Draw sprite with no shift
	BR	LB461		; B451	JP $B461	
	NOP			; B454	NOP	
				; B455	NOP	
	CALL	L9A26		; B456	CALL $8F7F	16. -- JP 9A26 Draw sprite with shift by 2px
	BR	LB461		; B459	JP $B461	
	NOP			; B45C	NOP	
				; B45D	NOP	
	CALL	L99D1		; B45E	CALL $8F7C	24. -- JP 99D1 Draw sprite with shift by 4px
LB461:	POP	R1		; B461	POP BC	
	POP	R0		; B462	POP AF	
LB463:	MOV	#96., R3	; B463	LD HL,$0060	
	ADD	R1, R3		; B466	ADD HL,BC	
	MOV	R3, R1		; B467	LD C,L	
				; B468	LD B,H	
	ADD	#24., R0	; B469	ADD A,$18	
	CMP	R0, #32.	; B46B	CP $20	
	BLO	LB472		; B46D	JR C,$B472	
	BIC	#177740, R0	; B46F	AND $1F	
	DEC	R1		; B471	DEC BC	
LB472:	MOV	LB4CB, R3	; B472	LD HL,($B4CB)	restore HL
	RORB	(R3)+		; B475	RR (HL)	
				; B477	INC L	
	RORB	(R3)+		; B478	RR (HL)	
				; B47A	INC L	
	RORB	(R3)+		; B47B	RR (HL)	
				; B47D	INC L	
	RORB	(R3)+		; B47E	RR (HL)	
				; B480	INC L	
	RORB	(R3)		; B481	RR (HL)	
	POP	R2		; B483	POP DE		restore loop counter
	SOB	R2, LB433	; B484	DEC E	
				; B485	JR NZ,$B433	loop
	CALL	LB3A9		; B487	CALL $B3A9	Prepare screen
	MOV	#LB499, R3	; B48A	LD HL,$B499	
	MOV	#LD900, R2	; B48D	LD DE,$D900	
	MOVB	#50., R1	; B490	LD BC,$0032	
1$:	MOVB	(R3)+, (R2)+	; B493	LDIR	
	SOB	R1, 1$
	POP	R0		; B495	POP AF	
	POP	R1		; B496	POP BC	
	POP	R3		; B497	POP HL	
	RETURN			; B498	RET	

LB499:	.BYTE	000,127,165,127,120, 000,122,105,125,120
	.BYTE	000,162,127,167,160, 000,122,125,165,040
	.BYTE	000,127,165,125,040, 007,167,165,167,167
	.BYTE	004,124,125,122,105, 007,124,125,122,167
	.BYTE	004,124,125,122,106 ,007,127,167,122,165
        .EVEN

LB4CB:	.WORD	0		; Temporary place for HL
LB4CD:	.WORD	LB8F0		; Mask and Sprite address
LB4CF:	.BYTE	104		; Attribute?
        .EVEN
	
; Show Info Screen
LB4D0:	MOVB	#6, LB4CF		; B4D0	LD A,$06	
					; B4D2	LD ($B4CF),A	
	CALL	LB2DA			; B4D5	CALL $B2DA	Prepare shadow screen
	MOV	#<LDBC0+1925.>, R1	; B4D8	LD BC,$E345	
	MOV	#LC040, R2		; B4DB	LD DE,$C040	Sprite: Vorton looking forward
	CALL	L9A70			; B4DE	CALL $8F82	JP 9A70 Draw sprite with no shift
	MOV	#<LDBC0+2052.>, R1	; B4E1	LD BC,$E3C4	
	MOV	#LC040, R2		; B4E4	LD DE,$C040	Sprite: Vorton looking forward
	CALL	L9A70			; B4E7	CALL $8F82	JP 9A70 Draw sprite with no shift
	MOV	#<LDBC0+2179.>, R1	; B4EA	LD BC,$E443	
	MOV	#LC040, R2		; B4ED	LD DE,$C040	Sprite: Vorton looking forward
	CALL	L9A70			; B4F0	CALL $8F82	JP 9A70 Draw sprite with no shift
	MOV	#<LDBC0+2306.>, R1	; B4F3	LD BC,$E4C2	
	MOV	#LC040, R2		; B4F6	LD DE,$C040	Sprite: Vorton looking forward
	CALL	L9A70			; B4F9	CALL $8F82	JP 9A70 Draw sprite with no shift
	MOV	#<LDBC0+2504.>, R1	; B4FC	LD BC,$E588	
	MOV	#LD240, R2		; B4FF	LD DE,$D240	Sprite: Lasertron
	CALL	L9933			; B502	CALL $8F85	JP 9933 Draw sprite with shift by -2px
	MOV	#<LDBC0+2914.>, R1	; B505	LD BC,$E722	
	MOV	#LD630, R2		; B508	LD DE,$D630	Sprite: Main Vorton looking at player
	CALL	L99D1			; B50B	CALL $8F7C	JP 99D1 Draw sprite with shift by 4px
	CALL	LB39A			; B50E	CALL $B39A	Prepare screen with attributes
	CALL	LB52D			; B511	CALL $B52D	Print Small Font Signs
	MOV	#LB7B5, R3		; B514	LD HL,$B7B5	
	CALL	LB890			; B517	CALL $B890	Print Text

	CALL	WTKEY

	JMP	LB0E1			; B52A	JP $B0E1

; Print Small Font Signs on the Info Screen
; NOTE: I removed the second pass used to fill attributes
LB52D:	MOV	#LB62C, R3	; B52D	LD HL,$B62C	Info Screen Small Font Signs
				; B530	PUSH HL	
LB531:	MOV	(R3)+, R2	; B531	LD D,(HL)	
				; B532	INC HL	
				; B533	LD E,(HL)	
				; B534	INC HL	
				; B535	INC HL	
	BIC	#177400, R1	; B536	LD C,$00	
	DEC	R2		; B538	DEC E	
LB539:	MOVB	(R3)+, R0	; B539	LD A,(HL)	
	BIC	#177400, R0	; B53A	INC HL	
	CMP	R0, #254.	; B53B	CP $FE
	BLO	LB544		; B53D	JR C,$B544	
	BEQ	LB5BB		; B53F	JP Z,$B5BB	
	BR	LB531		; B542	JR $B531	
LB544:	PUSH	R3		; B544	PUSH HL	
	PUSH	R1		; B545	PUSH BC	
	PUSH	R2		; B546	PUSH DE	
	MOV	R0, R3		; B547	LD L,A	
				; B548	LD H,$00	
	ASR	R3		; B54A	SRL L	
	PUSH	R3		; B54C	PUSH HL	
	ASL	R3		; B54D	ADD HL,HL	
	ASL	R3		; B54E	ADD HL,HL	
	POP	R2		; B54F	POP BC	
	ADD	R2, R3		; B550	ADD HL,BC	
	ADD	#<LB5D7-150.>, R3	; B551	LD BC,$B541	
				; B554	ADD HL,BC	
	MOV	#LB627, R2	; B555	LD DE,$B627	temp storage
	MOVB	#5, R1		; B558	LD BC,$0005	
1$:	MOVB	(R3)+, (R2)+	; B55B	LDIR		copy
	SOB	R1, 1$
	MOV	#LB627, R3	; B55D	LD HL,$B627	
	BIT	#1, R0		; B560	BIT 0,A		odd or even?	
	BNE	LB56F		; B562	JR NZ,$B56F	odd => jump
	MOVB	#5, R1		; B564	LD B,$05	
LB566:	BICB	#340, (R3)+	; B566	LD A,$70	Оставляем младшие 4 бита
				; B568	AND (HL)	
				; B569	LD (HL),A	
				; B56A	INC HL	
	SOB	R1, LB566	; B56B	DJNZ $B566	
	BR	LB57C		; B56D	JR $B57C	
LB56F:	MOVB	#5, R1		; B56F	LD B,$05	
LB571:	CLC
	RORB	(R3)		; B571	SLA (HL)	
	ASRB	(R3)		; B573	SLA (HL)	
	ASRB	(R3)		; B575	SLA (HL)	
	ASRB	(R3)+		; B577	SLA (HL)	
				; B579	INC HL	
	SOB	R1, LB571	; B57A	DJNZ $B571	
LB57C:	POP	R2		; B57C	POP DE	
	POP	R1		; B57D	POP BC	
	PUSH	R1		; B57E	PUSH BC	
	MOV	#LB627, R3	; B57F	LD HL,$B627	
	BITB	#1, R1		; B582	BIT 0,C	
	BEQ	LB5A3		; B584	JR Z,$B5A3	
	PUSH	R2		; B586	PUSH DE	
	MOV	R3, R2		; B587	EX DE,HL	
	MOV	(SP), R3
	MOV	R3, @#176640   		; Устанавливаем косвенный адрес
	CLRB	@#176642	; B588	LD (HL),$00	
	ADD	#80., R3	; B58A	INC H		next line
	MOV	R3, @#176640
	CLRB	@#176642	; B58B	LD (HL),$00	
	ADD	#80., R3	; B58D	INC H		next line
	MOVB	#5, R1		; B58E	LD B,$05	
LB590:	MOVB	(R2)+, R0	; B590	LD A,(DE)	
	ASL	R0		; B591	SRL A	
	ASL	R0		; B593	SRL A	
	ASL	R0		; B595	SRL A	
	ASL	R0		; B597	SRL A	
	MOV	R3, @#176640   		; Устанавливаем косвенный адрес
	BIS	R0, @#176642	; B599	OR (HL)	
				; B59A	LD (HL),A	
	;INC	R2		; B59B	INC DE	
	ADD	#80., R3	; B59C	INC H		next line
	SOB	R1, LB590	; B59D	DJNZ $B590	
	MOV	R3, @#176640   		; Устанавливаем косвенный адрес
	CLRB	@#176642	; B59F	LD (HL),$00	
	BR	LB5B4		; B5A1	JR $B5B4	
LB5A3:	INC	R2		; B5A3	INC DE	
	PUSH	R2		; B5A4	PUSH DE	
	MOV	R2, @#176640   		; Устанавливаем косвенный адрес
	CLR	@#176642	; B5A5	XOR A	
				; B5A6	LD (DE),A	
	ADD	#80., R2	; B5A7	INC D		next line
	MOV	R2, @#176640   		; Устанавливаем косвенный адрес
	CLR	@#176642	; B5A8	LD (DE),A	
	ADD	#80., R2	; B5A9	INC D		next line
	MOVB	#5, R1		; B5AA	LD B,$05	
LB5AC:	MOVB	(R3)+, R0	; B5AC	LD A,(HL)	
	BIC	#177400, R0
	MOV	R2, @#176640   		; Устанавливаем косвенный адрес
	MOV	R0, @#176642	; B5AD	LD (DE),A	
				; B5AE	INC HL	
	ADD	#80., R2	; B5AF	INC D		next line
	SOB	R1, LB5AC	; B5B0	DJNZ $B5AC	
	MOV	R2, @#176640   		; Устанавливаем косвенный адрес
	CLR	@#176642	; B5B2	XOR A	
				; B5B3	LD (DE),A	
LB5B4:	POP	R2		; B5B4	POP DE	
	POP	R1		; B5B5	POP BC	
	POP	R3		; B5B6	POP HL	
	INC	R1		; B5B7	INC C	
	BR	LB539		; B5B8	JP $B539	
LB5BB:				; B5BB	POP HL	
	RETURN
LB627:	.BLKB	5
	.EVEN
LB62C:	.WORD	113714
	.ASCII	/PROGRAMMED@TO@PUSH@THE@LASERTRON@/
	.BYTE	377
	.WORD	115114
	.ASCII	/@AND@PROVIDE@BACKUP@FOR@THE@MAIN@VORTON@@/
	.BYTE	377
	.WORD	120720
	.ASCII	/YOUR@ULTRA@POWERFUL@WEAPON@/
	.BYTE	377
	.WORD	122120
	.ASCII	/@ACTIVATED@ONLY@IN@ZONE@ZERO@/
	.BYTE	377
	.WORD	125705
	.ASCII	/UNDER@YOUR@DIRECT@CONTROL/
	.BYTE	377
	.WORD	127105
	.ASCII	/@USE@HIM@TO@CLEAR@THE@WAY@AHEAD@@/
	.BYTE	377
	.WORD	132707
	.ASCII	/TAKE@THE@LASERTRON@BEYOND/
	.BYTE	377
	.WORD	134107
	.ASCII	/@ZONE@ZERO@TO@ENCOUNTER@AND/
	.BYTE	377
	.WORD	135307
	.ASCII	/DESTROY@THE@ALIEN@STRONGHOLD@@/
	.BYTE	376
	.EVEN

; Info Screen Text
LB7B5:	.WORD	112514
	.BYTE	130,212,121,145,144,137,116,146,137,142,144,137,136,143,212,377	; AUTO-VORTONS
	.WORD	117520
	.BYTE	131,212,134,121,143,125,142,144,142,137,136,212,377,000		; LASERTRON
	.WORD	124505
	.BYTE	131,212,135,121,131,136,115,146,137,142,144,137,136,212,377,000	; MAIN VORTON
	.WORD	131507
	.BYTE	132,212,151,137,145,142,115,135,131,143,143,131,137,136,212,377	; YOUR MISSION
	.WORD	125731
	.BYTE	131,212,123,137,136,144,142,137,134,143,212,377			; CONTROLS
	.WORD	130331
	.BYTE	131,101,377,000							; I
	.WORD	130336
	.BYTE	131,137,377,000							; O
	.WORD	131531
	.BYTE	132,141,377,000							; Q
	.WORD	131536
	.BYTE	132,140,377,000							; P
	.WORD	132731
	.BYTE	132,152,377,000							; Z
	.WORD	132733
	.BYTE	132,135,377,000							; M
	.WORD	132736
	.BYTE	132,112,377,000							; ' '
	.WORD	134131
	.BYTE	132,130,377,000							; H
	.WORD	135331
	.BYTE	132,121,377,000							; A
	.WORD	135333
	.BYTE	132,127,377,000							; G
	.WORD	142307
	.BYTE	132,212,140,142,125,143,143,115,121,136,151,115,133,125,151,115	; PRESS ANY KEY
	.BYTE	147,130,125,136,115,142,125,121,124,151,212,377			; WHEN READY
	.WORD	105512
	.BYTE	130,312,130,131,127,130,147,121,151,115,115,125,136,123,137,145 ; HIGHWAY
	.BYTE	136,144,125,142,312,377						; ENCOUNTER
	.WORD	106710
	.BYTE	130,212,123,134,121,143,143,131,126,131,125,124,115,131,136,126 ; CLASSIFIED
	.BYTE	137,142,135,121,144,131,137,136,212,376				; INFORMATION
	.EVEN

; Routine: Print Text
;NOTE: I removed the first pass needed to fill in screen attributes
;NOTE: I added even address alignment after byte 377
LB890:
	MOV	#176640, R4		; Адрес порта адреса косвенной записи УКНЦ
	MOV	#176642, R5		; Адрес порта данных косвенной записи УКНЦ
LB8BB:	MOV	(R3)+, R2	; B8BB	LD D,(HL)	
				; B8BC	INC HL	
				; B8BD	LD E,(HL)	
				; B8BE	INC HL	
	INC	R3		; B8BF	INC HL	
LB8C0:	MOVB	(R3)+, R0	; B8C0	LD A,(HL)	
	BIC    	#177400, R0	; B8C1	INC HL	
	CMP	R0, #254.	; B8C2	CP $FE	
	BLO	LB8C9		; B8C4	JR C,$B8C9	
	BNE	1$		
	RETURN                  ; B8C6	RET Z	
1$:	BIT	#1, R3
	BEQ	LB8BB
	INC	R3			; Alignment to an even address
	BR	LB8BB		; B8C7	JR $B8BB
LB8C9:	BIC	#177700, R0	; B8C9	AND $3F	
	PUSH	R3		; B8CB	PUSH HL	
	MOV	R0, R3		; B8CC	LD L,A	
				; B8CD	LD H,$00	
				; B8CF	PUSH HL	
	ASL	R3		; B8D0	ADD HL,HL	
	ASL	R3		; B8D1	ADD HL,HL	
				; B8D2	POP BC	
	ADD	R0, R3		; B8D3	ADD HL,BC	HL <- HL * 5
	ADD	#L5B00, R3	; B8D4	LD BC,$5B00	
				; B8D7	ADD HL,BC	
	PUSH	R2		; B8D8	PUSH DE	
				; B8D9	XOR A	
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	#000, (R5)	; B8DA	LD (DE),A	write to the screen
				; B8DB	LD A,$7F	
	ADD	#000120, R2	; B8DD	INC D		next line
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	#077577, (R5)	; B8DE	LD (DE),A	write to the screen
	ADD	#000120, R2	; B8DF	INC D		next line
	MOV	#5, R1		; B8E0	LD B,$05	counter = 5
LB8E2:	MOVB	(R3), R0	; B8E2	LD A,(HL)	
	SWAB	R0
	BISB	(R3)+, R0
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	R0, (R5)	; B8E3	LD (DE),A	write to the screen
	ADD	#000120, R2	; B8E4	INC D		next line
				; B8E5	INC HL	
	SOB	R1, LB8E2	; B8E6	DJNZ $B8E2	repeat
				; B8E8	LD A,$7F	
	MOV	R2, (R4)		; Устанавливаем косвенный адрес
	MOV	#077577, (R5)	; B8EA	LD (DE),A	write to the screen
	POP	R2		; B8EB	POP DE	
	INC	R2		; B8EC	INC DE		next position on the screen
	POP	R3		; B8ED	POP HL	
	BR	LB8C0		; B8EE	JR $B8C0	

;------------------------------------------------------------------------------

.BLKW	100			; For stack

;------------------------------------------------------------------------------
	.END	START
